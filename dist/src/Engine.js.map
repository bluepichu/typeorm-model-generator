{"version":3,"sources":["../src/Engine.ts"],"names":[],"mappings":"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","file":"Engine.js","sourcesContent":["import { AbstractDriver } from \"./drivers/AbstractDriver\";\nimport { DatabaseModel } from \"./models/DatabaseModel\";\nimport * as Handlebars from \"handlebars\";\nimport fs = require(\"fs\");\nimport path = require(\"path\");\nimport * as TomgUtils from \"./Utils\";\nimport changeCase = require(\"change-case\");\nimport { AbstractNamingStrategy } from \"./AbstractNamingStrategy\";\n\nexport class Engine {\n    constructor(\n        private driver: AbstractDriver,\n        public Options: EngineOptions\n    ) {}\n\n    public async createModelFromDatabase(): Promise<boolean> {\n        let dbModel = await this.getEntitiesInfo(\n            this.Options.databaseName,\n            this.Options.host,\n            this.Options.port,\n            this.Options.user,\n            this.Options.password,\n            this.Options.schemaName,\n            this.Options.ssl,\n            this.Options.namingStrategy,\n            this.Options.relationIds\n        );\n        if (dbModel.entities.length > 0) {\n            this.createModelFromMetadata(dbModel);\n        } else {\n            TomgUtils.LogError(\n                \"Tables not found in selected database. Skipping creation of typeorm model.\",\n                false\n            );\n        }\n        return true;\n    }\n    private async getEntitiesInfo(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        schemaName: string,\n        ssl: boolean,\n        namingStrategy: AbstractNamingStrategy,\n        relationIds: boolean\n    ): Promise<DatabaseModel> {\n        return await this.driver.GetDataFromServer(\n            database,\n            server,\n            port,\n            user,\n            password,\n            schemaName,\n            ssl,\n            namingStrategy,\n            relationIds\n        );\n    }\n    private createModelFromMetadata(databaseModel: DatabaseModel) {\n        this.createHandlebarsHelpers();\n        let templatePath = path.resolve(__dirname, \"../../src/entity.mst\");\n        let template = fs.readFileSync(templatePath, \"UTF-8\");\n        let resultPath = this.Options.resultsPath;\n        if (!fs.existsSync(resultPath)) fs.mkdirSync(resultPath);\n        let entitesPath = resultPath;\n        if (!this.Options.noConfigs) {\n            this.createTsConfigFile(resultPath);\n            this.createTypeOrmConfig(resultPath);\n            entitesPath = path.resolve(resultPath, \"./entities\");\n            if (!fs.existsSync(entitesPath)) fs.mkdirSync(entitesPath);\n        }\n        let compliedTemplate = Handlebars.compile(template, { noEscape: true });\n        databaseModel.entities.forEach(element => {\n            let casedFileName = \"\";\n            switch (this.Options.convertCaseFile) {\n                case \"camel\":\n                    casedFileName = changeCase.camelCase(element.EntityName);\n                    break;\n                case \"param\":\n                    casedFileName = changeCase.paramCase(element.EntityName);\n                    break;\n                case \"pascal\":\n                    casedFileName = changeCase.pascalCase(element.EntityName);\n                    break;\n                case \"none\":\n                    casedFileName = element.EntityName;\n                    break;\n            }\n            let resultFilePath = path.resolve(\n                entitesPath,\n                casedFileName + \".ts\"\n            );\n            let rendered = compliedTemplate(element);\n            fs.writeFileSync(resultFilePath, rendered, {\n                encoding: \"UTF-8\",\n                flag: \"w\"\n            });\n        });\n\n        let enumTemplatePath = path.resolve(__dirname, \"../../src/enum.mst\");\n        let enumTemplate = fs.readFileSync(enumTemplatePath, \"UTF-8\");\n        let compiledEnumTemplate = Handlebars.compile(enumTemplate, { noEscape: true });\n        databaseModel.enums.forEach((en) => {\n            let rendered = compiledEnumTemplate(en);\n            let casedFileName = \"\";\n            switch (this.Options.convertCaseFile) {\n                case \"camel\":\n                    casedFileName = changeCase.camelCase(en.name);\n                    break;\n                case \"param\":\n                    casedFileName = changeCase.paramCase(en.name);\n                    break;\n                case \"pascal\":\n                    casedFileName = changeCase.pascalCase(en.name);\n                    break;\n                case \"none\":\n                    casedFileName = en.name;\n                    break;\n            }\n            let resultFilePath = path.resolve(\n                entitesPath,\n                casedFileName + \".ts\"\n            );\n            fs.writeFileSync(resultFilePath, rendered, {\n                encoding: \"UTF-8\",\n                flag: \"w\"\n            });\n        });\n    }\n    private createHandlebarsHelpers() {\n        let toEntityName = (str) => {\n            let retStr = \"\";\n            switch (this.Options.convertCaseEntity) {\n                case \"camel\":\n                    retStr = changeCase.camelCase(str);\n                    break;\n                case \"pascal\":\n                    retStr = changeCase.pascalCase(str);\n                    break;\n                case \"none\":\n                    retStr = str;\n                    break;\n            }\n            return retStr;\n        };\n\n        Handlebars.registerHelper(\"curly\", open => {\n            return open ? \"{\" : \"}\";\n        });\n        Handlebars.registerHelper(\"toEntityName\", str => {\n            let retStr = \"\";\n            switch (this.Options.convertCaseEntity) {\n                case \"camel\":\n                    retStr = changeCase.camelCase(str);\n                    break;\n                case \"pascal\":\n                    retStr = changeCase.pascalCase(str);\n                    break;\n                case \"none\":\n                    retStr = str;\n                    break;\n            }\n            return retStr;\n        });\n        Handlebars.registerHelper(\"concat\", (stra, strb) => {\n            return stra + strb;\n        });\n        Handlebars.registerHelper(\"toFileName\", str => {\n            let retStr = \"\";\n            switch (this.Options.convertCaseFile) {\n                case \"camel\":\n                    retStr = changeCase.camelCase(str);\n                    break;\n                case \"param\":\n                    retStr = changeCase.paramCase(str);\n                    break;\n                case \"pascal\":\n                    retStr = changeCase.pascalCase(str);\n                    break;\n                case \"none\":\n                    retStr = str;\n                    break;\n            }\n            return retStr;\n        });\n        Handlebars.registerHelper(\"constantCase\", str => changeCase.constantCase(str));\n        Handlebars.registerHelper(\"tsTypeToString\", obj => {\n            if (typeof obj === \"string\") {\n                return obj;\n            } else {\n                return toEntityName(obj.name);\n            }\n        });\n        Handlebars.registerHelper(\"toPropertyName\", str => {\n            let retStr = \"\";\n\n            if (this.Options.removeIdSuffix && str.length > 3 && str.endsWith(\"_id\")) {\n                str = str.substring(0, str.length - 3);\n            }\n\n            switch (this.Options.convertCaseProperty) {\n                case \"camel\":\n                    retStr = changeCase.camelCase(str);\n                    break;\n                case \"pascal\":\n                    retStr = changeCase.pascalCase(str);\n                    break;\n                case \"none\":\n                    retStr = str;\n                    break;\n            }\n            return retStr;\n        });\n        Handlebars.registerHelper(\"toLowerCase\", str => {\n            return str.toLowerCase();\n        });\n        Handlebars.registerHelper(\"toLazy\", str => {\n            if (this.Options.lazy) return `Promise<${str}>`;\n            else return str;\n        });\n        Handlebars.registerHelper({\n            eq: function(v1, v2) {\n                return v1 === v2;\n            },\n            ne: function(v1, v2) {\n                return v1 !== v2;\n            },\n            lt: function(v1, v2) {\n                return v1 < v2;\n            },\n            gt: function(v1, v2) {\n                return v1 > v2;\n            },\n            lte: function(v1, v2) {\n                return v1 <= v2;\n            },\n            gte: function(v1, v2) {\n                return v1 >= v2;\n            },\n            and: function(v1, v2) {\n                return v1 && v2;\n            },\n            or: function(v1, v2) {\n                return v1 || v2;\n            }\n        });\n    }\n\n    //TODO:Move to mustache template file\n    private createTsConfigFile(resultPath) {\n        fs.writeFileSync(\n            path.resolve(resultPath, \"tsconfig.json\"),\n            `{\"compilerOptions\": {\n        \"lib\": [\"es5\", \"es6\"],\n        \"target\": \"es6\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"node\",\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"sourceMap\": true\n    }}`,\n            { encoding: \"UTF-8\", flag: \"w\" }\n        );\n    }\n    private createTypeOrmConfig(resultPath) {\n        if (this.Options.schemaName == \"\") {\n            fs.writeFileSync(\n                path.resolve(resultPath, \"ormconfig.json\"),\n                `[\n  {\n    \"name\": \"default\",\n    \"type\": \"${this.Options.databaseType}\",\n    \"host\": \"${this.Options.host}\",\n    \"port\": ${this.Options.port},\n    \"username\": \"${this.Options.user}\",\n    \"password\": \"${this.Options.password}\",\n    \"database\": \"${this.Options.databaseName}\",\n    \"synchronize\": false,\n    \"entities\": [\n      \"entities/*.js\"\n    ]\n  }\n]`,\n                { encoding: \"UTF-8\", flag: \"w\" }\n            );\n        } else {\n            fs.writeFileSync(\n                path.resolve(resultPath, \"ormconfig.json\"),\n                `[\n  {\n    \"name\": \"default\",\n    \"type\": \"${this.Options.databaseType}\",\n    \"host\": \"${this.Options.host}\",\n    \"port\": ${this.Options.port},\n    \"username\": \"${this.Options.user}\",\n    \"password\": \"${this.Options.password}\",\n    \"database\": \"${this.Options.databaseName}\",\n    \"schema\": \"${this.Options.schemaName}\",\n    \"synchronize\": false,\n    \"entities\": [\n      \"entities/*.js\"\n    ]\n  }\n]`,\n                { encoding: \"UTF-8\", flag: \"w\" }\n            );\n        }\n    }\n}\nexport interface EngineOptions {\n    host: string;\n    port: number;\n    databaseName: string;\n    user: string;\n    password: string;\n    resultsPath: string;\n    databaseType: string;\n    schemaName: string;\n    ssl: boolean;\n    noConfigs: boolean;\n    convertCaseFile: \"pascal\" | \"param\" | \"camel\" | \"none\";\n    convertCaseEntity: \"pascal\" | \"camel\" | \"none\";\n    convertCaseProperty: \"pascal\" | \"camel\" | \"none\";\n    removeIdSuffix: boolean;\n    lazy: boolean;\n    constructor: boolean;\n    namingStrategy: AbstractNamingStrategy;\n    relationIds: boolean;\n}\n"]}