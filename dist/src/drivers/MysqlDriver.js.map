{"version":3,"sources":["../src/drivers/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import { AbstractDriver } from \"./AbstractDriver\";\nimport * as MYSQL from \"mysql\";\nimport { ColumnInfo } from \"../models/ColumnInfo\";\nimport { EntityInfo } from \"../models/EntityInfo\";\nimport { EnumInfo } from \"../models/EnumInfo\";\nimport * as TomgUtils from \"../Utils\";\n\nexport class MysqlDriver extends AbstractDriver {\n    readonly EngineName: string = \"MySQL\";\n\n    GetAllTablesQuery = async (schema: string) => {\n        let response = this.ExecQuery<{\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n        }>(`SELECT TABLE_SCHEMA, TABLE_NAME\n            FROM information_schema.tables\n            WHERE table_type='BASE TABLE'\n            AND table_schema like DATABASE()`);\n        return response;\n    };\n\n    async GetCoulmnsFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response = await this.ExecQuery<{\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            COLUMN_DEFAULT: string;\n            IS_NULLABLE: string;\n            DATA_TYPE: string;\n            CHARACTER_MAXIMUM_LENGTH: number;\n            NUMERIC_PRECISION: number;\n            NUMERIC_SCALE: number;\n            IsIdentity: number;\n            column_type: string;\n            column_key: string;\n        }>(`SELECT TABLE_NAME,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,\n            DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,\n            CASE WHEN EXTRA like '%auto_increment%' THEN 1 ELSE 0 END IsIdentity, column_type, column_key\n            FROM INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA like DATABASE()`);\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TABLE_NAME == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let colInfo: ColumnInfo = new ColumnInfo();\n                    colInfo.tsName = resp.COLUMN_NAME;\n                    colInfo.sqlName = resp.COLUMN_NAME;\n                    colInfo.is_nullable = resp.IS_NULLABLE == \"YES\";\n                    colInfo.is_generated = resp.IsIdentity == 1;\n                    colInfo.is_unique = resp.column_key == \"UNI\";\n                    colInfo.default = resp.COLUMN_DEFAULT;\n                    colInfo.sql_type = resp.DATA_TYPE;\n                    switch (resp.DATA_TYPE) {\n                        case \"int\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"tinyint\":\n                            if (resp.column_type == \"tinyint(1)\") {\n                                colInfo.width = 1;\n                                colInfo.ts_type = \"boolean\";\n                            } else {\n                                colInfo.ts_type = \"number\";\n                            }\n                            break;\n                        case \"smallint\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"mediumint\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"bigint\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"float\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"double\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"decimal\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"date\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"datetime\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"timestamp\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"time\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"year\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"char\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"varchar\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"blob\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"text\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"tinyblob\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"tinytext\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"mediumblob\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"mediumtext\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"longblob\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"longtext\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"enum\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.enumOptions = resp.column_type\n                                .substring(5, resp.column_type.length - 1)\n                                .replace(/\\'/gi, '\"');\n                            break;\n                        case \"json\":\n                            colInfo.ts_type = \"Object\";\n                            break;\n                        case \"binary\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"geometry\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"point\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"linestring\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"polygon\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"multipoint\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"multilinestring\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"multipolygon\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"geometrycollection\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        default:\n                            TomgUtils.LogError(\n                                `Unknown column type: ${\n                                    resp.DATA_TYPE\n                                }  table name: ${\n                                    resp.TABLE_NAME\n                                } column name: ${resp.COLUMN_NAME}`\n                            );\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.numericPrecision = resp.NUMERIC_PRECISION;\n                        colInfo.numericScale = resp.NUMERIC_SCALE;\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.lenght =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : null;\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some(\n                            v =>\n                                v == colInfo.sql_type &&\n                                colInfo.ts_type != \"boolean\"\n                        )\n                    ) {\n                        colInfo.width =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : null;\n                    }\n\n                    if (colInfo.sql_type) ent.Columns.push(colInfo);\n                });\n        });\n        return entities;\n    }\n    async GetIndexesFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response = await this.ExecQuery<{\n            TableName: string;\n            IndexName: string;\n            ColumnName: string;\n            is_unique: number;\n            is_primary_key: number;\n        }>(`SELECT TABLE_NAME TableName,INDEX_NAME IndexName,COLUMN_NAME ColumnName,CASE WHEN NON_UNIQUE=0 THEN 1 ELSE 0 END is_unique,\n            CASE WHEN INDEX_NAME='PRIMARY' THEN 1 ELSE 0 END is_primary_key\n            FROM information_schema.statistics sta\n            WHERE table_schema like DATABASE();\n            `);\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TableName == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let indexInfo: IndexInfo = <IndexInfo>{};\n                    let indexColumnInfo: IndexColumnInfo = <IndexColumnInfo>{};\n                    if (\n                        ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.IndexName;\n                        }).length > 0\n                    ) {\n                        indexInfo = ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.IndexName;\n                        })[0];\n                    } else {\n                        indexInfo.columns = <IndexColumnInfo[]>[];\n                        indexInfo.name = resp.IndexName;\n                        indexInfo.isUnique = resp.is_unique == 1;\n                        indexInfo.isPrimaryKey = resp.is_primary_key == 1;\n                        ent.Indexes.push(indexInfo);\n                    }\n                    indexColumnInfo.name = resp.ColumnName;\n                    indexInfo.columns.push(indexColumnInfo);\n                });\n        });\n\n        return entities;\n    }\n    async GetRelations(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response = await this.ExecQuery<{\n            TableWithForeignKey: string;\n            FK_PartNo: number;\n            ForeignKeyColumn: string;\n            TableReferenced: string;\n            ForeignKeyColumnReferenced: string;\n            onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO_ACTION\";\n            onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO_ACTION\";\n            object_id: string;\n        }>(`SELECT\n            CU.TABLE_NAME TableWithForeignKey,\n            CU.ORDINAL_POSITION FK_PartNo,\n            CU.COLUMN_NAME ForeignKeyColumn,\n            CU.REFERENCED_TABLE_NAME TableReferenced,\n            CU.REFERENCED_COLUMN_NAME ForeignKeyColumnReferenced,\n            RC.DELETE_RULE onDelete,\n            RC.UPDATE_RULE onUpdate,\n            CU.CONSTRAINT_NAME object_id\n           FROM\n            INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU\n           JOIN\n            INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC ON CU.CONSTRAINT_NAME=RC.CONSTRAINT_NAME\n          WHERE\n            TABLE_SCHEMA = SCHEMA()\n            AND CU.REFERENCED_TABLE_NAME IS NOT NULL;\n            `);\n        let relationsTemp: RelationTempInfo[] = <RelationTempInfo[]>[];\n        response.forEach(resp => {\n            let rels = relationsTemp.find(val => {\n                return val.object_id == resp.object_id;\n            });\n            if (rels == undefined) {\n                rels = <RelationTempInfo>{};\n                rels.ownerColumnsNames = [];\n                rels.referencedColumnsNames = [];\n                rels.actionOnDelete =\n                    resp.onDelete == \"NO_ACTION\" ? null : resp.onDelete;\n                rels.actionOnUpdate =\n                    resp.onUpdate == \"NO_ACTION\" ? null : resp.onUpdate;\n                rels.object_id = resp.object_id;\n                rels.ownerTable = resp.TableWithForeignKey;\n                rels.referencedTable = resp.TableReferenced;\n                relationsTemp.push(rels);\n            }\n            rels.ownerColumnsNames.push(resp.ForeignKeyColumn);\n            rels.referencedColumnsNames.push(resp.ForeignKeyColumnReferenced);\n        });\n        entities = this.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities\n        );\n        return entities;\n    }\n    async GetEnums(schema: string): Promise<EnumInfo[]> {\n        return [];\n    }\n    async DisconnectFromServer() {\n        let promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection.end(err => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        `Error disconnecting to ${this.EngineName} Server.`,\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n        if (this.Connection) await promise;\n    }\n\n    private Connection: MYSQL.Connection;\n    async ConnectToServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        ssl: boolean\n    ) {\n        let config: MYSQL.ConnectionConfig;\n        if (ssl) {\n            config = {\n                database: database,\n                host: server,\n                port: port,\n                user: user,\n                password: password,\n                ssl: {\n                    rejectUnauthorized: false\n                }\n            };\n        } else {\n            config = {\n                database: database,\n                host: server,\n                port: port,\n                user: user,\n                password: password\n            };\n        }\n\n        let promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection = MYSQL.createConnection(config);\n\n            this.Connection.connect(err => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        `Error connecting to ${this.EngineName} Server.`,\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n    async CreateDB(dbName: string) {\n        await this.ExecQuery<any>(`CREATE DATABASE ${dbName}; `);\n    }\n    async UseDB(dbName: string) {\n        await this.ExecQuery<any>(`USE ${dbName}; `);\n    }\n    async DropDB(dbName: string) {\n        await this.ExecQuery<any>(`DROP DATABASE ${dbName}; `);\n    }\n    async CheckIfDBExists(dbName: string): Promise<boolean> {\n        let resp = await this.ExecQuery<any>(\n            `SHOW DATABASES LIKE '${dbName}' `\n        );\n        return resp.length > 0;\n    }\n    async ExecQuery<T>(sql: string): Promise<Array<T>> {\n        let ret: Array<T> = [];\n        let query = this.Connection.query(sql);\n        let stream = query.stream({});\n        let promise = new Promise<boolean>((resolve, reject) => {\n            stream.on(\"data\", chunk => {\n                ret.push(<T>(<any>chunk));\n            });\n            stream.on(\"error\", err => reject(err));\n            stream.on(\"end\", () => resolve(true));\n        });\n        await promise;\n        return ret;\n    }\n}\n"]}