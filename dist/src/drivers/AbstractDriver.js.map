{"version":3,"sources":["../src/drivers/AbstractDriver.ts"],"names":[],"mappings":"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","file":"AbstractDriver.js","sourcesContent":["import { EntityInfo } from \"../models/EntityInfo\";\nimport { DatabaseModel } from \"../models/DatabaseModel\";\nimport * as TomgUtils from \"../Utils\";\nimport { RelationInfo } from \"../models/RelationInfo\";\nimport { EnumInfo } from \"../models/EnumInfo\";\nimport { ColumnInfo } from \"../models/ColumnInfo\";\nimport {\n    WithWidthColumnType,\n    WithPrecisionColumnType,\n    WithLengthColumnType\n} from \"typeorm/driver/types/ColumnTypes\";\nimport { AbstractNamingStrategy } from \"../AbstractNamingStrategy\";\n\nexport abstract class AbstractDriver {\n    changeColumnNames(dbModel: DatabaseModel) {\n        dbModel.entities.forEach(entity => {\n            entity.Columns.forEach(column => {\n                let newName = this.namingStrategy.columnName(column.tsName);\n                entity.Indexes.forEach(index => {\n                    index.columns\n                        .filter(column2 => {\n                            return column2.name == column.tsName;\n                        })\n                        .forEach(column2 => {\n                            column2.name = newName;\n                        });\n                });\n                dbModel.entities.forEach(entity2 => {\n                    entity2.Columns.forEach(column2 => {\n                        column2.relations\n                            .filter(relation => {\n                                return (\n                                    relation.relatedTable ==\n                                        entity.EntityName &&\n                                    relation.relatedColumn == column.tsName\n                                );\n                            })\n                            .map(v => {\n                                v.relatedColumn = newName;\n                            });\n                        column2.relations\n                            .filter(relation => {\n                                return (\n                                    relation.ownerTable == entity.EntityName &&\n                                    relation.ownerColumn == column.tsName\n                                );\n                            })\n                            .map(v => {\n                                v.ownerColumn = newName;\n                            });\n                    });\n                });\n\n                column.tsName = newName;\n            });\n        });\n    }\n    changeEntityNames(dbModel: DatabaseModel) {\n        dbModel.entities.forEach(entity => {\n            let newName = this.namingStrategy.columnName(entity.EntityName);\n            dbModel.entities.forEach(entity2 => {\n                entity2.Columns.forEach(column => {\n                    column.relations.forEach(relation => {\n                        if (relation.ownerTable == entity.EntityName)\n                            relation.ownerTable = newName;\n                        if (relation.relatedTable == entity.EntityName)\n                            relation.relatedTable = newName;\n                    });\n                });\n            });\n            entity.EntityName = newName;\n        });\n    }\n    changeRelationNames(dbModel: DatabaseModel) {\n        dbModel.entities.forEach(entity => {\n            entity.Columns.forEach(column => {\n                column.relations.forEach(relation => {\n                    if (true || !relation.isOwner) {\n                        let newName = this.namingStrategy.relationName(\n                            column.tsName,\n                            relation,\n                            dbModel\n                        );\n                        dbModel.entities.forEach(entity2 => {\n                            entity2.Columns.forEach(column2 => {\n                                column2.relations.forEach(relation2 => {\n                                    if (\n                                        relation2.relatedTable ==\n                                            entity.EntityName &&\n                                        relation2.ownerColumn == column.tsName\n                                    ) {\n                                        relation2.ownerColumn = newName;\n                                    }\n                                    if (\n                                        relation2.relatedTable ==\n                                            entity.EntityName &&\n                                        relation2.relatedColumn == column.tsName\n                                    ) {\n                                        relation2.relatedColumn = newName;\n                                    }\n                                    if (relation.isOwner) {\n                                        entity.Indexes.forEach(ind => {\n                                            ind.columns.forEach(col => {\n                                                if (col.name == column.tsName) {\n                                                    col.name = newName;\n                                                }\n                                            });\n                                        });\n                                    }\n                                });\n                            });\n                        });\n                        column.tsName = newName;\n                    }\n                });\n            });\n        });\n    }\n    ColumnTypesWithWidth: WithWidthColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"bigint\"\n    ];\n    ColumnTypesWithPrecision: WithPrecisionColumnType[] = [\n        \"float\",\n        \"double\",\n        \"dec\",\n        \"decimal\",\n        \"numeric\",\n        \"real\",\n        \"double precision\",\n        \"number\",\n        \"datetime\",\n        \"datetime2\",\n        \"datetimeoffset\",\n        \"time\",\n        \"time with time zone\",\n        \"time without time zone\",\n        \"timestamp\",\n        \"timestamp without time zone\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\"\n    ];\n    ColumnTypesWithLength: WithLengthColumnType[] = [\n        \"character varying\",\n        \"varying character\",\n        \"nvarchar\",\n        \"character\",\n        \"native character\",\n        \"varchar\",\n        \"char\",\n        \"nchar\",\n        \"varchar2\",\n        \"nvarchar2\",\n        \"raw\",\n        \"binary\",\n        \"varbinary\"\n    ];\n    namingStrategy: AbstractNamingStrategy;\n    generateRelationsIds: boolean;\n\n    FindManyToManyRelations(dbModel: DatabaseModel) {\n        let manyToManyEntities = dbModel.entities.filter(entity => {\n            return (\n                entity.Columns.filter(column => {\n                    return (\n                        column.relations.length == 1 &&\n                        !column.relations[0].isOneToMany &&\n                        column.relations[0].isOwner\n                    );\n                }).length == entity.Columns.length\n            );\n        });\n        manyToManyEntities.map(entity => {\n            let relations: RelationInfo[] = [];\n            relations = entity.Columns.reduce((prev: RelationInfo[], curr) => {\n                return prev.concat(curr.relations);\n            }, relations);\n            let namesOfRelatedTables = relations\n                .map(v => v.relatedTable)\n                .filter((v, i, s) => s.indexOf(v) == i);\n            if (namesOfRelatedTables.length == 2) {\n                let relatedTable1 = dbModel.entities.filter(\n                    v => v.EntityName == namesOfRelatedTables[0]\n                )[0];\n                relatedTable1.Columns = relatedTable1.Columns.filter(\n                    v =>\n                        !v.tsName\n                            .toLowerCase()\n                            .startsWith(entity.EntityName.toLowerCase())\n                );\n                let relatedTable2 = dbModel.entities.filter(\n                    v => v.EntityName == namesOfRelatedTables[1]\n                )[0];\n                relatedTable2.Columns = relatedTable2.Columns.filter(\n                    v =>\n                        !v.tsName\n                            .toLowerCase()\n                            .startsWith(entity.EntityName.toLowerCase())\n                );\n                dbModel.entities = dbModel.entities.filter(ent => {\n                    return ent.EntityName != entity.EntityName;\n                });\n\n                let column1 = new ColumnInfo();\n                column1.tsName = namesOfRelatedTables[1];\n\n                let col1Rel = new RelationInfo();\n                col1Rel.relatedTable = namesOfRelatedTables[1];\n                col1Rel.relatedColumn = namesOfRelatedTables[1];\n\n                col1Rel.relationType = \"ManyToMany\";\n                col1Rel.isOwner = true;\n                col1Rel.ownerColumn = namesOfRelatedTables[0];\n\n                let entityColumnsWithRelations = entity.Columns.filter((col) => col.relations.length > 0);\n\n                col1Rel.joinInfo = {\n                    joinTable: entity.EntityName,\n                    joinColumns: entity.Columns\n                        .filter((col) => col.relations.some((rel) => rel.relatedTable === namesOfRelatedTables[0]))\n                        .map((col) => col.sqlName),\n                    inverseJoinColumns: entity.Columns\n                        .filter((col) => col.relations.some((rel) => rel.relatedTable === namesOfRelatedTables[1]))\n                        .map((col) => col.sqlName)\n                };\n\n                column1.relations.push(col1Rel);\n                relatedTable1.Columns.push(column1);\n\n                let column2 = new ColumnInfo();\n                column2.tsName = namesOfRelatedTables[0];\n\n                let col2Rel = new RelationInfo();\n                col2Rel.relatedTable = namesOfRelatedTables[0];\n                col2Rel.relatedColumn = namesOfRelatedTables[1];\n\n                col2Rel.relationType = \"ManyToMany\";\n                col2Rel.isOwner = false;\n\n                column2.relations.push(col2Rel);\n                relatedTable2.Columns.push(column2);\n            }\n        });\n    }\n    async GetDataFromServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        schema: string,\n        ssl: boolean,\n        namingStrategy: AbstractNamingStrategy,\n        relationIds: boolean\n    ): Promise<DatabaseModel> {\n        this.generateRelationsIds = relationIds;\n        let dbModel = <DatabaseModel>{};\n        this.namingStrategy = namingStrategy;\n        await this.ConnectToServer(database, server, port, user, password, ssl);\n        let sqlEscapedSchema = \"'\" + schema.split(\",\").join(\"','\") + \"'\";\n        dbModel.entities = await this.GetAllTables(sqlEscapedSchema);\n        await this.GetCoulmnsFromEntity(dbModel.entities, sqlEscapedSchema);\n        await this.GetIndexesFromEntity(dbModel.entities, sqlEscapedSchema);\n        dbModel.entities = await this.GetRelations(\n            dbModel.entities,\n            sqlEscapedSchema\n        );\n        dbModel.enums = await this.GetEnums(schema);\n        await this.DisconnectFromServer();\n        this.FindManyToManyRelations(dbModel);\n        this.FindPrimaryColumnsFromIndexes(dbModel);\n        this.ApplyNamingStrategy(dbModel);\n        return dbModel;\n    }\n\n    private ApplyNamingStrategy(dbModel: DatabaseModel) {\n        this.changeRelationNames(dbModel);\n        this.changeEntityNames(dbModel);\n        this.changeColumnNames(dbModel);\n    }\n\n    abstract async ConnectToServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        ssl: boolean\n    );\n\n    abstract GetAllTablesQuery: (\n        schema: string\n    ) => Promise<\n        {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            TABLE_TYPE?: \"BASE TABLE\" | \"VIEW\";\n        }[]\n    >;\n\n    async GetAllTables(schema: string): Promise<EntityInfo[]> {\n        let response = await this.GetAllTablesQuery(schema);\n        let ret: EntityInfo[] = <EntityInfo[]>[];\n        response.forEach(val => {\n            let ent: EntityInfo = new EntityInfo();\n            ent.EntityName = val.TABLE_NAME;\n            ent.Schema = val.TABLE_SCHEMA;\n            ent.Type = val.TABLE_TYPE;\n            ent.Columns = <ColumnInfo[]>[];\n            ent.Indexes = <IndexInfo[]>[];\n            ret.push(ent);\n        });\n        return ret;\n    }\n\n    GetRelationsFromRelationTempInfo(\n        relationsTemp: RelationTempInfo[],\n        entities: EntityInfo[]\n    ) {\n        relationsTemp.forEach(relationTmp => {\n            let ownerEntity = entities.find(entitity => {\n                return entitity.EntityName == relationTmp.ownerTable;\n            });\n            if (!ownerEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable} and ${\n                        relationTmp.referencedTable\n                    } didn't found entity model ${relationTmp.ownerTable}.`\n                );\n                return;\n            }\n            let referencedEntity = entities.find(entitity => {\n                return entitity.EntityName == relationTmp.referencedTable;\n            });\n            if (!referencedEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable} and ${\n                        relationTmp.referencedTable\n                    } didn't found entity model ${relationTmp.referencedTable}.`\n                );\n                return;\n            }\n            for (\n                let relationColumnIndex = 0;\n                relationColumnIndex < relationTmp.ownerColumnsNames.length;\n                relationColumnIndex++\n            ) {\n                let ownerColumn = ownerEntity.Columns.find(column => {\n                    return (\n                        column.tsName ==\n                        relationTmp.ownerColumnsNames[relationColumnIndex]\n                    );\n                });\n                if (!ownerColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${\n                            relationTmp.ownerTable\n                        } and ${\n                            relationTmp.referencedTable\n                        } didn't found entity column ${\n                            relationTmp.ownerTable\n                        }.${ownerColumn}.`\n                    );\n                    return;\n                }\n                let relatedColumn = referencedEntity.Columns.find(column => {\n                    return (\n                        column.tsName ==\n                        relationTmp.referencedColumnsNames[relationColumnIndex]\n                    );\n                });\n                if (!relatedColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${\n                            relationTmp.ownerTable\n                        } and ${\n                            relationTmp.referencedTable\n                        } didn't found entity column ${\n                            relationTmp.referencedTable\n                        }.${relatedColumn}.`\n                    );\n                    return;\n                }\n                let isOneToMany: boolean;\n                isOneToMany = false;\n                let index = ownerEntity.Indexes.find(index => {\n                    return (\n                        index.isUnique &&\n                        index.columns.length === 1 &&\n                        index.columns.some(col => {\n                            return col.name == ownerColumn!.tsName;\n                        })\n                    );\n                });\n                isOneToMany = !index;\n\n                let ownerRelation = new RelationInfo();\n                ownerRelation.actionOnDelete = relationTmp.actionOnDelete;\n                ownerRelation.actionOnUpdate = relationTmp.actionOnUpdate;\n                ownerRelation.isOwner = true;\n                ownerRelation.relatedColumn = relatedColumn.tsName.toLowerCase();\n                ownerRelation.relatedTable = relationTmp.referencedTable;\n                ownerRelation.ownerTable = relationTmp.ownerTable;\n                ownerRelation.relationType = isOneToMany\n                    ? \"ManyToOne\"\n                    : \"OneToOne\";\n                ownerRelation.relationIdField = this.generateRelationsIds;\n\n                let columnName = ownerEntity.EntityName;\n                if (\n                    referencedEntity.Columns.some(v => v.tsName == columnName)\n                ) {\n                    columnName = columnName + \"_\";\n                    for (let i = 2; i <= referencedEntity.Columns.length; i++) {\n                        columnName =\n                            columnName.substring(\n                                0,\n                                columnName.length - i.toString().length\n                            ) + i.toString();\n                        if (\n                            referencedEntity.Columns.every(\n                                v => v.tsName != columnName\n                            )\n                        )\n                            break;\n                    }\n                }\n\n                ownerRelation.ownerColumn = columnName;\n                ownerColumn.relations.push(ownerRelation);\n                if (isOneToMany) {\n                    let col = new ColumnInfo();\n                    col.tsName = columnName;\n                    let referencedRelation = new RelationInfo();\n                    col.relations.push(referencedRelation);\n                    referencedRelation.actionOnDelete =\n                        relationTmp.actionOnDelete;\n                    referencedRelation.actionOnUpdate =\n                        relationTmp.actionOnUpdate;\n                    referencedRelation.isOwner = false;\n                    referencedRelation.relatedColumn = ownerColumn.tsName;\n                    referencedRelation.relatedTable = relationTmp.ownerTable;\n                    referencedRelation.ownerTable = relationTmp.referencedTable;\n                    referencedRelation.ownerColumn = relatedColumn.tsName;\n                    referencedRelation.relationType = \"OneToMany\";\n                    referencedEntity.Columns.push(col);\n                } else {\n                    let col = new ColumnInfo();\n                    col.tsName = columnName;\n                    let referencedRelation = new RelationInfo();\n                    col.relations.push(referencedRelation);\n                    referencedRelation.actionOnDelete =\n                        relationTmp.actionOnDelete;\n                    referencedRelation.actionOnUpdate =\n                        relationTmp.actionOnUpdate;\n                    referencedRelation.isOwner = false;\n                    referencedRelation.relatedColumn = ownerColumn.tsName;\n                    referencedRelation.relatedTable = relationTmp.ownerTable;\n                    referencedRelation.ownerTable = relationTmp.referencedTable;\n                    referencedRelation.ownerColumn = relatedColumn.tsName;\n                    referencedRelation.relationType = \"OneToOne\";\n                    referencedEntity.Columns.push(col);\n                }\n            }\n        });\n        return entities;\n    }\n    abstract async GetCoulmnsFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]>;\n    abstract async GetIndexesFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]>;\n    abstract async GetRelations(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]>;\n    abstract async GetEnums(\n        schema: String\n    ): Promise<EnumInfo[]>;\n\n    FindPrimaryColumnsFromIndexes(dbModel: DatabaseModel) {\n        dbModel.entities.forEach(entity => {\n            let primaryIndex = entity.Indexes.find(v => v.isPrimaryKey);\n            entity.Columns.forEach(col => {\n                if (\n                    primaryIndex &&\n                    primaryIndex.columns.some(\n                        cIndex => cIndex.name == col.tsName\n                    )\n                )\n                    col.isPrimary = true;\n            });\n            if (!entity.Columns.some(v => v.isPrimary)) {\n                if (entity.Type === \"VIEW\") {\n                    // jokes, let's just call everything primary\n                    entity.Columns.forEach((col) => { col.isPrimary = true; });\n                } else {\n                    TomgUtils.LogError(\n                        `Table ${entity.EntityName} has no PK.`,\n                        false\n                    );\n                    return;\n                }\n            }\n        });\n    }\n    abstract async DisconnectFromServer();\n    abstract async CreateDB(dbName: string);\n    abstract async DropDB(dbName: string);\n    abstract async UseDB(dbName: string);\n    abstract async CheckIfDBExists(dbName: string): Promise<boolean>;\n}\n"]}