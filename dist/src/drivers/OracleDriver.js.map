{"version":3,"sources":["../src/drivers/OracleDriver.ts"],"names":[],"mappings":"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","file":"OracleDriver.js","sourcesContent":["import { AbstractDriver } from \"./AbstractDriver\";\nimport { ColumnInfo } from \"../models/ColumnInfo\";\nimport { EntityInfo } from \"../models/EntityInfo\";\nimport { EnumInfo } from \"../models/EnumInfo\";\nimport * as TomgUtils from \"../Utils\";\n\nexport class OracleDriver extends AbstractDriver {\n    Oracle: any;\n    constructor() {\n        super();\n        try {\n            this.Oracle = require(\"oracledb\");\n            this.Oracle.outFormat = this.Oracle.OBJECT;\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    GetAllTablesQuery = async (schema: string) => {\n        let response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n        }[] = (await this.Connection.execute(\n            ` SELECT NULL AS TABLE_SCHEMA, TABLE_NAME FROM all_tables WHERE  owner = (select user from dual)`\n        )).rows!;\n        return response;\n    };\n\n    async GetCoulmnsFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            DATA_DEFAULT: string;\n            NULLABLE: string;\n            DATA_TYPE: string;\n            DATA_LENGTH: number;\n            DATA_PRECISION: number;\n            DATA_SCALE: number;\n            IDENTITY_COLUMN: string;\n            IS_UNIQUE: Number;\n        }[] = (await this.Connection\n            .execute(`SELECT utc.TABLE_NAME, utc.COLUMN_NAME, DATA_DEFAULT, NULLABLE, DATA_TYPE, DATA_LENGTH,\n            DATA_PRECISION, DATA_SCALE, IDENTITY_COLUMN,\n            (select count(*) from USER_CONS_COLUMNS ucc\n             JOIN USER_CONSTRAINTS uc ON  uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME and uc.CONSTRAINT_TYPE='U'\n            where ucc.column_name = utc.COLUMN_NAME AND ucc.table_name = utc.TABLE_NAME) IS_UNIQUE\n           FROM USER_TAB_COLUMNS utc`)).rows!;\n\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TABLE_NAME == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let colInfo: ColumnInfo = new ColumnInfo();\n                    colInfo.tsName = resp.COLUMN_NAME;\n                    colInfo.sqlName = resp.COLUMN_NAME;\n                    colInfo.is_nullable = resp.NULLABLE == \"Y\";\n                    colInfo.is_generated = resp.IDENTITY_COLUMN == \"YES\";\n                    colInfo.default =\n                        !resp.DATA_DEFAULT || resp.DATA_DEFAULT.includes('\"')\n                            ? null\n                            : resp.DATA_DEFAULT;\n                    colInfo.is_unique = resp.IS_UNIQUE > 0;\n                    resp.DATA_TYPE = resp.DATA_TYPE.replace(/\\([0-9]+\\)/g, \"\");\n                    colInfo.sql_type = resp.DATA_TYPE.toLowerCase();\n                    switch (resp.DATA_TYPE.toLowerCase()) {\n                        case \"char\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"nchar\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"nvarchar2\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"varchar2\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"long\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"raw\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"long raw\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"number\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"numeric\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"float\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"dec\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"decimal\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"integer\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"int\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"smallint\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"real\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"double precision\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"date\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"timestamp\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"timestamp with time zone\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"timestamp with local time zone\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"interval year to month\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"interval day to second\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"bfile\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"blob\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"clob\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"nclob\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"rowid\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"urowid\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        default:\n                            TomgUtils.LogError(\n                                \"Unknown column type:\" + resp.DATA_TYPE\n                            );\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.numericPrecision = resp.DATA_PRECISION;\n                        colInfo.numericScale = resp.DATA_SCALE;\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.lenght =\n                            resp.DATA_LENGTH > 0 ? resp.DATA_LENGTH : null;\n                    }\n\n                    if (colInfo.sql_type) ent.Columns.push(colInfo);\n                });\n        });\n        return entities;\n    }\n    async GetIndexesFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            COLUMN_NAME: string;\n            TABLE_NAME: string;\n            INDEX_NAME: string;\n            UNIQUENESS: string;\n            ISPRIMARYKEY: number;\n        }[] = (await this.Connection\n            .execute(`SELECT ind.TABLE_NAME, ind.INDEX_NAME, col.COLUMN_NAME,ind.UNIQUENESS, CASE WHEN uc.CONSTRAINT_NAME IS NULL THEN 0 ELSE 1 END ISPRIMARYKEY\n        FROM USER_INDEXES ind\n        JOIN USER_IND_COLUMNS col ON ind.INDEX_NAME=col.INDEX_NAME\n        LEFT JOIN USER_CONSTRAINTS uc ON  uc.INDEX_NAME = ind.INDEX_NAME\n        ORDER BY col.INDEX_NAME ASC ,col.COLUMN_POSITION ASC`)).rows!;\n\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TABLE_NAME == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let indexInfo: IndexInfo = <IndexInfo>{};\n                    let indexColumnInfo: IndexColumnInfo = <IndexColumnInfo>{};\n                    if (\n                        ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.INDEX_NAME;\n                        }).length > 0\n                    ) {\n                        indexInfo = ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.INDEX_NAME;\n                        })[0];\n                    } else {\n                        indexInfo.columns = <IndexColumnInfo[]>[];\n                        indexInfo.name = resp.INDEX_NAME;\n                        indexInfo.isUnique = resp.UNIQUENESS == \"UNIQUE\";\n                        indexInfo.isPrimaryKey = resp.ISPRIMARYKEY == 1;\n                        ent.Indexes.push(indexInfo);\n                    }\n                    indexColumnInfo.name = resp.COLUMN_NAME;\n                    indexInfo.columns.push(indexColumnInfo);\n                });\n        });\n\n        return entities;\n    }\n    async GetRelations(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            OWNER_TABLE_NAME: string;\n            OWNER_POSITION: string;\n            OWNER_COLUMN_NAME: string;\n            CHILD_TABLE_NAME: string;\n            CHILD_COLUMN_NAME: string;\n            DELETE_RULE: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n            CONSTRAINT_NAME: string;\n        }[] = (await this.Connection\n            .execute(`select owner.TABLE_NAME OWNER_TABLE_NAME,ownCol.POSITION OWNER_POSITION,ownCol.COLUMN_NAME OWNER_COLUMN_NAME,\n        child.TABLE_NAME CHILD_TABLE_NAME ,childCol.COLUMN_NAME CHILD_COLUMN_NAME,\n        owner.DELETE_RULE,\n        owner.CONSTRAINT_NAME\n        from user_constraints owner\n        join user_constraints child on owner.r_constraint_name=child.CONSTRAINT_NAME and child.constraint_type in ('P','U')\n        JOIN USER_CONS_COLUMNS ownCol ON owner.CONSTRAINT_NAME = ownCol.CONSTRAINT_NAME\n        JOIN USER_CONS_COLUMNS childCol ON child.CONSTRAINT_NAME = childCol.CONSTRAINT_NAME AND ownCol.POSITION=childCol.POSITION\n        ORDER BY OWNER_TABLE_NAME ASC, owner.CONSTRAINT_NAME ASC, OWNER_POSITION ASC`))\n            .rows!;\n\n        let relationsTemp: RelationTempInfo[] = <RelationTempInfo[]>[];\n        response.forEach(resp => {\n            let rels = relationsTemp.find(val => {\n                return val.object_id == resp.CONSTRAINT_NAME;\n            });\n            if (rels == undefined) {\n                rels = <RelationTempInfo>{};\n                rels.ownerColumnsNames = [];\n                rels.referencedColumnsNames = [];\n                rels.actionOnDelete =\n                    resp.DELETE_RULE == \"NO ACTION\" ? null : resp.DELETE_RULE;\n                rels.actionOnUpdate = null;\n                rels.object_id = resp.CONSTRAINT_NAME;\n                rels.ownerTable = resp.OWNER_TABLE_NAME;\n                rels.referencedTable = resp.CHILD_TABLE_NAME;\n                relationsTemp.push(rels);\n            }\n            rels.ownerColumnsNames.push(resp.OWNER_COLUMN_NAME);\n            rels.referencedColumnsNames.push(resp.CHILD_COLUMN_NAME);\n        });\n        entities = this.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities\n        );\n        return entities;\n    }\n    async GetEnums(schema: string): Promise<EnumInfo[]> {\n        return [];\n    }\n    async DisconnectFromServer() {\n        if (this.Connection) await this.Connection.close();\n    }\n\n    private Connection: any /*Oracle.IConnection*/;\n    async ConnectToServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        ssl: boolean\n    ) {\n        let config: any;\n        if (user == String(process.env.ORACLE_UsernameSys)) {\n            config /*Oracle.IConnectionAttributes*/ = {\n                user: user,\n                password: password,\n                connectString: `${server}:${port}/${database}`,\n                externalAuth: ssl,\n                privilege: this.Oracle.SYSDBA\n            };\n        } else {\n            config /*Oracle.IConnectionAttributes*/ = {\n                user: user,\n                password: password,\n                connectString: `${server}:${port}/${database}`,\n                externalAuth: ssl\n            };\n        }\n        let that = this;\n        let promise = new Promise<boolean>((resolve, reject) => {\n            this.Oracle.getConnection(config, function(err, connection) {\n                if (!err) {\n                    that.Connection = connection;\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to Oracle Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    async CreateDB(dbName: string) {\n        await this.Connection.execute(\n            `CREATE USER ${dbName} IDENTIFIED BY ${String(\n                process.env.ORACLE_Password\n            )}`\n        );\n        await this.Connection.execute(`GRANT CONNECT TO ${dbName}`);\n    }\n    async UseDB(dbName: string) {}\n    async DropDB(dbName: string) {\n        await this.Connection.execute(`DROP USER ${dbName} CASCADE`);\n    }\n    async CheckIfDBExists(dbName: string): Promise<boolean> {\n        var x = await this.Connection.execute(\n            `select count(*) as CNT from dba_users where username='${dbName.toUpperCase()}'`\n        );\n        return x.rows[0][0] > 0 || x.rows[0].CNT;\n    }\n}\n"]}