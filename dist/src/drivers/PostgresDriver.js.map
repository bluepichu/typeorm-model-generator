{"version":3,"sources":["../src/drivers/PostgresDriver.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qDAAkD;AAClD,yBAAyB;AACzB,qDAAkD;AAGlD,sCAAsC;AAEtC,oBAA4B,SAAQ,+BAAc;IAAlD;;QAGI,sBAAiB,GAAG,CAAO,MAAc,EAAE,EAAE;YACzC,IAAI,QAAQ,GAIN,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAC9B,sJAAsJ,MAAM,IAAI,CACnK,CAAC,CAAC,IAAI,CAAC;YACR,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAA,CAAC;IA+dN,CAAC;IA7dS,oBAAoB,CACtB,QAAsB,EACtB,MAAc;;YAEd,IAAI,QAAQ,GAWN,CAAC,MAAM,IAAI,CAAC,UAAU;iBACvB,KAAK,CAAC;;;;;;;;;;;;uEAYoD,MAAM,GAAG,CAAC,CAAC;iBACrE,IAAI,CAAC;YACV,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACnB,QAAQ;qBACH,MAAM,CAAC,SAAS,CAAC,EAAE;oBAChB,OAAO,SAAS,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,CAAC;gBAClD,CAAC,CAAC;qBACD,OAAO,CAAC,IAAI,CAAC,EAAE;oBACZ,IAAI,OAAO,GAAe,IAAI,uBAAU,EAAE,CAAC;oBAC3C,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;oBAClC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC;oBAChD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC;oBAChD,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;oBACvC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,YAAY;wBAClC,CAAC,CAAC,IAAI;wBACN,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC1B,QAAQ,IAAI,CAAC,QAAQ,EAAE;wBACnB,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACzB,MAAM;wBACV,KAAK,SAAS;4BACV,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,OAAO,CAAC,MAAM;gCACV,IAAI,CAAC,wBAAwB,GAAG,CAAC;oCAC7B,CAAC,CAAC,IAAI,CAAC,wBAAwB;oCAC/B,CAAC,CAAC,IAAI,CAAC;4BACf,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,UAAU,CAAC;4BAC9B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;4BAC5B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;4BAC5B,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;4BAC5B,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;4BAClD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;4BAC1C,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;4BAC3B,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;4BAClD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;4BAC1C,MAAM;wBACV,KAAK,SAAS;4BACV,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;4BAClD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;4BAC1C,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,wBAAwB,CAAC;4BAC5C,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC;4BACzB,OAAO,CAAC,QAAQ,GAAG,qBAAqB,CAAC;4BACzC,MAAM;wBACV,KAAK,WAAW;4BACZ,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC;4BACzB,OAAO,CAAC,QAAQ,GAAG,6BAA6B,CAAC;4BACjD,MAAM;wBACV,KAAK,aAAa;4BACd,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC;4BACzB,OAAO,CAAC,QAAQ,GAAG,0BAA0B,CAAC;4BAC9C,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,OAAO;4BACR,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;4BAC3B,MAAM;wBACV,KAAK,OAAO;4BACR,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;4BAC3B,MAAM;wBACV,KAAK,WAAW;4BACZ,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC;4BAC/B,OAAO,CAAC,MAAM;gCACV,IAAI,CAAC,wBAAwB,GAAG,CAAC;oCAC7B,CAAC,CAAC,IAAI,CAAC,wBAAwB;oCAC/B,CAAC,CAAC,IAAI,CAAC;4BACf,MAAM;wBACV,KAAK,OAAO;4BACR,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;4BAC3B,MAAM;wBACV,KAAK,UAAU;4BACX,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;4BACxB,OAAO,CAAC,QAAQ,GAAG,UAAU,CAAC;4BAC9B,MAAM;wBACV,KAAK,OAAO;4BACR,OAAO,CAAC,OAAO,GAAG,iBAAiB,CAAC;4BACpC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;4BAC3B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,mBAAmB,CAAC;4BACtC,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,KAAK;4BACN,OAAO,CAAC,OAAO,GAAG,iBAAiB,CAAC;4BACpC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACzB,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,SAAS;4BACV,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,OAAO,GAAG,iBAAiB,CAAC;4BACpC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;4BAC5B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,MAAM;4BACP,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;4BAC1B,MAAM;wBACV,KAAK,SAAS;4BACV,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,MAAM;wBACV,KAAK,KAAK;4BACN,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACzB,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,aAAa,CAAC;4BACjC,MAAM;wBACV,KAAK,KAAK;4BACN,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;4BAC3B,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACzB,MAAM;wBACV;4BACI,uCAAuC;4BACvC,OAAO,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;4BACxD,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC7B,MAAM;qBACb;oBACD,IACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAC9B,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAC7B,EACH;wBACE,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;wBAClD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;qBAC7C;oBACD,IACI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAC3B,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAC7B,EACH;wBACE,OAAO,CAAC,MAAM;4BACV,IAAI,CAAC,wBAAwB,GAAG,CAAC;gCAC7B,CAAC,CAAC,IAAI,CAAC,wBAAwB;gCAC/B,CAAC,CAAC,IAAI,CAAC;qBAClB;oBACD,IACI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAC1B,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAC7B,EACH;wBACE,OAAO,CAAC,KAAK;4BACT,IAAI,CAAC,wBAAwB,GAAG,CAAC;gCAC7B,CAAC,CAAC,IAAI,CAAC,wBAAwB;gCAC/B,CAAC,CAAC,IAAI,CAAC;qBAClB;oBACD,IAAI,OAAO,CAAC,QAAQ;wBAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IACK,QAAQ,CAAC,MAAc;;YACzB,IAAI,aAAa,GAGX,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;;;;;;iCAMV,MAAM,GAAG,CAAC,CAAC;iBAC3B,IAAI,CAAC;YAEd,IAAI,KAAK,GACL,aAAa;iBACR,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,EAAE;gBACzC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;oBACvB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;iBAC5B;gBAED,KAAK,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACvC,OAAO,KAAK,CAAC;YACjB,CAAC,EAAE,IAAI,GAAG,EAAoB,CAAC,CAAC;YAExC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAE,EAAE,CAAC,CAAC,CAAC;QACxF,CAAC;KAAA;IACK,oBAAoB,CACtB,QAAsB,EACtB,MAAc;;YAEd,IAAI,QAAQ,GAMN,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;4BAoBf,MAAM;;;sCAGI,CAAC,CAAC,CAAC,IAAI,CAAC;YACtC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACnB,QAAQ;qBACH,MAAM,CAAC,SAAS,CAAC,EAAE;oBAChB,OAAO,SAAS,CAAC,SAAS,IAAI,GAAG,CAAC,UAAU,CAAC;gBACjD,CAAC,CAAC;qBACD,OAAO,CAAC,IAAI,CAAC,EAAE;oBACZ,IAAI,SAAS,GAAyB,EAAE,CAAC;oBACzC,IAAI,eAAe,GAAqC,EAAE,CAAC;oBAC3D,IACI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;wBAC3B,OAAO,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC;oBAC5C,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EACf;wBACE,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;4BACvC,OAAO,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC;wBAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACT;yBAAM;wBACH,SAAS,CAAC,OAAO,GAAsB,EAAE,CAAC;wBAC1C,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;wBAChC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;wBACzC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;wBAClD,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC/B;oBACD,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;oBACvC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;oBAC1C,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,EAAE;wBAC1B,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC;qBAClC;oBACD,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IACK,YAAY,CACd,QAAsB,EACtB,MAAc;;YAEd,IAAI,QAAQ,GASN,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;uCAyBJ,MAAM;;;;;;;;;;;;oDAYO,CAAC,CAAC,CAAC,IAAI,CAAC;YACpD,IAAI,aAAa,GAA2C,EAAE,CAAC;YAC/D,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACpB,IAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;oBAChC,OAAO,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBACH,IAAI,IAAI,IAAI,SAAS,EAAE;oBACnB,IAAI,GAAqB,EAAE,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;oBAC5B,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;oBACjC,IAAI,CAAC,cAAc;wBACf,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACxD,IAAI,CAAC,cAAc;wBACf,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACxD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;oBAC3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC5C,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC5B;gBACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACnD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YACH,QAAQ,GAAG,IAAI,CAAC,gCAAgC,CAC5C,aAAa,EACb,QAAQ,CACX,CAAC;YACF,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IACK,oBAAoB;;YACtB,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,IAAI,OAAO,GAAG,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBACnD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;wBACtB,IAAI,CAAC,GAAG,EAAE;4BACN,OAAO,CAAC,IAAI,CAAC,CAAC;yBACjB;6BAAM;4BACH,SAAS,CAAC,QAAQ,CACd,sCAAsC,EACtC,KAAK,EACL,GAAG,CAAC,OAAO,CACd,CAAC;4BACF,MAAM,CAAC,GAAG,CAAC,CAAC;yBACf;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;gBACH,MAAM,OAAO,CAAC;aACjB;QACL,CAAC;KAAA;IAEK,eAAe,CACjB,QAAgB,EAChB,MAAc,EACd,IAAY,EACZ,IAAY,EACZ,QAAgB,EAChB,GAAY;;YAEZ,IAAI,CAAC,UAAU,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC;gBAC5B,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,QAAQ;gBAClB,GAAG,EAAE,GAAG;aACX,CAAC,CAAC;YAEH,IAAI,OAAO,GAAG,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC1B,IAAI,CAAC,GAAG,EAAE;wBACN,OAAO,CAAC,IAAI,CAAC,CAAC;qBACjB;yBAAM;wBACH,SAAS,CAAC,QAAQ,CACd,sCAAsC,EACtC,KAAK,EACL,GAAG,CAAC,OAAO,CACd,CAAC;wBACF,MAAM,CAAC,GAAG,CAAC,CAAC;qBACf;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC;QAClB,CAAC;KAAA;IAEK,QAAQ,CAAC,MAAc;;YACzB,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAmB,MAAM,IAAI,CAAC,CAAC;QAC/D,CAAC;KAAA;IACK,KAAK,CAAC,MAAc;;YACtB,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,MAAM,IAAI,CAAC,CAAC;QACnD,CAAC;KAAA;IACK,MAAM,CAAC,MAAc;;YACvB,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,iBAAiB,MAAM,IAAI,CAAC,CAAC;QAC7D,CAAC;KAAA;IACK,eAAe,CAAC,MAAc;;YAChC,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAClC,qDAAqD,MAAM,IAAI,CAClE,CAAC;YACF,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC7B,CAAC;KAAA;CACJ;AA3eD,wCA2eC","file":"PostgresDriver.js","sourcesContent":["import { AbstractDriver } from \"./AbstractDriver\";\nimport * as PG from \"pg\";\nimport { ColumnInfo } from \"../models/ColumnInfo\";\nimport { EntityInfo } from \"../models/EntityInfo\";\nimport { EnumInfo } from \"../models/EnumInfo\";\nimport * as TomgUtils from \"../Utils\";\n\nexport class PostgresDriver extends AbstractDriver {\n    private Connection: PG.Client;\n\n    GetAllTablesQuery = async (schema: string) => {\n        let response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            TABLE_TYPE: \"BASE TABLE\" | \"VIEW\";\n        }[] = (await this.Connection.query(\n            `SELECT table_schema as \"TABLE_SCHEMA\",table_name as \"TABLE_NAME\", table_type as \"TABLE_TYPE\" FROM INFORMATION_SCHEMA.TABLES WHERE table_schema in (${schema}) `\n        )).rows;\n        return response;\n    };\n\n    async GetCoulmnsFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            table_name: string;\n            column_name: string;\n            column_default: string;\n            is_nullable: string;\n            udt_name: string;\n            character_maximum_length: number;\n            numeric_precision: number;\n            numeric_scale: number;\n            isidentity: string;\n            isunique: number;\n        }[] = (await this.Connection\n            .query(`SELECT table_name,column_name,column_default,is_nullable,\n            udt_name,character_maximum_length,numeric_precision,numeric_scale,\n            case when column_default LIKE 'nextval%' then 'YES' else 'NO' end isidentity,\n\t\t\t(SELECT count(*)\n    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n        inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu\n            on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n    where\n        tc.CONSTRAINT_TYPE = 'UNIQUE'\n        and tc.TABLE_NAME = c.TABLE_NAME\n        and cu.COLUMN_NAME = c.COLUMN_NAME\n        and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique\n            FROM INFORMATION_SCHEMA.COLUMNS c where table_schema in (${schema})`))\n            .rows;\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.table_name == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let colInfo: ColumnInfo = new ColumnInfo();\n                    colInfo.tsName = resp.column_name;\n                    colInfo.sqlName = resp.column_name;\n                    colInfo.is_nullable = resp.is_nullable == \"YES\";\n                    colInfo.is_generated = resp.isidentity == \"YES\";\n                    colInfo.is_unique = resp.isunique == 1;\n                    colInfo.default = colInfo.is_generated\n                        ? null\n                        : resp.column_default;\n                    switch (resp.udt_name) {\n                        case \"int4\":\n                            colInfo.ts_type = \"number\";\n                            colInfo.sql_type = \"int\";\n                            break;\n                        case \"varchar\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"varchar\";\n                            colInfo.lenght =\n                                resp.character_maximum_length > 0\n                                    ? resp.character_maximum_length\n                                    : null;\n                            break;\n                        case \"text\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"text\";\n                            break;\n                        case \"uuid\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"uuid\";\n                            break;\n                        case \"int2\":\n                            colInfo.ts_type = \"number\";\n                            colInfo.sql_type = \"smallint\";\n                            break;\n                        case \"int8\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"bigint\";\n                            break;\n                        case \"date\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"date\";\n                            break;\n                        case \"bool\":\n                            colInfo.ts_type = \"boolean\";\n                            colInfo.sql_type = \"boolean\";\n                            break;\n                        case \"float8\":\n                            colInfo.ts_type = \"number\";\n                            colInfo.sql_type = \"double\";\n                            colInfo.numericPrecision = resp.numeric_precision;\n                            colInfo.numericScale = resp.numeric_scale;\n                            break;\n                        case \"float4\":\n                            colInfo.ts_type = \"number\";\n                            colInfo.sql_type = \"float\";\n                            colInfo.numericPrecision = resp.numeric_precision;\n                            colInfo.numericScale = resp.numeric_scale;\n                            break;\n                        case \"numeric\":\n                            colInfo.ts_type = \"number\";\n                            colInfo.sql_type = \"numeric\";\n                            colInfo.numericPrecision = resp.numeric_precision;\n                            colInfo.numericScale = resp.numeric_scale;\n                            break;\n                        case \"time\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"time without time zone\";\n                            break;\n                        case \"timetz\":\n                            colInfo.ts_type = \"Date\";\n                            colInfo.sql_type = \"time with time zone\";\n                            break;\n                        case \"timestamp\":\n                            colInfo.ts_type = \"Date\";\n                            colInfo.sql_type = \"timestamp without time zone\";\n                            break;\n                        case \"timestamptz\":\n                            colInfo.ts_type = \"Date\";\n                            colInfo.sql_type = \"timestamp with time zone\";\n                            break;\n                        case \"json\":\n                            colInfo.ts_type = \"Object\";\n                            colInfo.sql_type = \"json\";\n                            break;\n                        case \"jsonb\":\n                            colInfo.ts_type = \"Object\";\n                            colInfo.sql_type = \"jsonb\";\n                            break;\n                        case \"money\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"money\";\n                            break;\n                        case \"character\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"character\";\n                            colInfo.lenght =\n                                resp.character_maximum_length > 0\n                                    ? resp.character_maximum_length\n                                    : null;\n                            break;\n                        case \"bytea\":\n                            colInfo.ts_type = \"Buffer\";\n                            colInfo.sql_type = \"bytea\";\n                            break;\n                        case \"interval\":\n                            colInfo.ts_type = \"any\";\n                            colInfo.sql_type = \"interval\";\n                            break;\n                        case \"point\":\n                            colInfo.ts_type = \"string | Object\";\n                            colInfo.sql_type = \"point\";\n                            break;\n                        case \"line\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"line\";\n                            break;\n                        case \"lseg\":\n                            colInfo.ts_type = \"string | string[]\";\n                            colInfo.sql_type = \"lseg\";\n                            break;\n                        case \"box\":\n                            colInfo.ts_type = \"string | Object\";\n                            colInfo.sql_type = \"box\";\n                            break;\n                        case \"path\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"path\";\n                            break;\n                        case \"polygon\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"polygon\";\n                            break;\n                        case \"circle\":\n                            colInfo.ts_type = \"string | Object\";\n                            colInfo.sql_type = \"circle\";\n                            break;\n                        case \"cidr\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"cidr\";\n                            break;\n                        case \"inet\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"inet\";\n                            break;\n                        case \"macaddr\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"macaddr\";\n                            break;\n                        case \"bit\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"bit\";\n                            break;\n                        case \"varbit\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"bit varying\";\n                            break;\n                        case \"xml\":\n                            colInfo.ts_type = \"string\";\n                            colInfo.sql_type = \"xml\";\n                            break;\n                        default:\n                            // Assume that it's a user-defined enum\n                            colInfo.ts_type = { kind: \"enum\", name: resp.udt_name };\n                            colInfo.sql_type = \"varchar\";\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.numericPrecision = resp.numeric_precision;\n                        colInfo.numericScale = resp.numeric_scale;\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.lenght =\n                            resp.character_maximum_length > 0\n                                ? resp.character_maximum_length\n                                : null;\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.width =\n                            resp.character_maximum_length > 0\n                                ? resp.character_maximum_length\n                                : null;\n                    }\n                    if (colInfo.sql_type) ent.Columns.push(colInfo);\n                });\n        });\n        return entities;\n    }\n    async GetEnums(schema: string): Promise<EnumInfo[]> {\n        let enumsResponse: {\n            enum_name: string;\n            enum_value: string;\n        }[] = (await this.Connection.query(`\n            SELECT t.typname AS enum_name,\n                e.enumlabel AS enum_value\n            FROM pg_type t\n                JOIN pg_enum e ON t.oid = e.enumtypid\n                JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\n            WHERE n.nspname = '${schema}'`))\n                .rows;\n\n        let enums =\n            enumsResponse\n                .reduce((enums, { enum_name, enum_value }) => {\n                    if (!enums.has(enum_name)) {\n                        enums.set(enum_name, []);\n                    }\n\n                    enums.get(enum_name)!.push(enum_value);\n                    return enums;\n                }, new Map<string, string[]>());\n\n        return Array.from(enums.keys()).map((name) => ({ name, values: enums.get(name)! }));\n    }\n    async GetIndexesFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            tablename: string;\n            indexname: string;\n            columnname: string;\n            is_unique: number;\n            is_primary_key: number;\n        }[] = (await this.Connection.query(`SELECT\n        c.relname AS tablename,\n        i.relname as indexname,\n        f.attname AS columnname,\n        CASE\n            WHEN ix.indisunique = true THEN '1'\n            ELSE '0'\n        END AS is_unique,\n        CASE\n            WHEN ix.indisprimary='true' THEN '1'\n            ELSE '0'\n        END AS is_primary_key\n        FROM pg_attribute f\n        JOIN pg_class c ON c.oid = f.attrelid\n        JOIN pg_type t ON t.oid = f.atttypid\n        LEFT JOIN pg_attrdef d ON d.adrelid = c.oid AND d.adnum = f.attnum\n        LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n        LEFT JOIN pg_index AS ix ON f.attnum = ANY(ix.indkey) and c.oid = f.attrelid and c.oid = ix.indrelid\n        LEFT JOIN pg_class AS i ON ix.indexrelid = i.oid\n        WHERE c.relkind = 'r'::char\n        AND n.nspname in (${schema})\n        AND f.attnum > 0\n        AND i.oid<>0\n        ORDER BY c.relname,f.attname;`)).rows;\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.tablename == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let indexInfo: IndexInfo = <IndexInfo>{};\n                    let indexColumnInfo: IndexColumnInfo = <IndexColumnInfo>{};\n                    if (\n                        ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.indexname;\n                        }).length > 0\n                    ) {\n                        indexInfo = ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.indexname;\n                        })[0];\n                    } else {\n                        indexInfo.columns = <IndexColumnInfo[]>[];\n                        indexInfo.name = resp.indexname;\n                        indexInfo.isUnique = resp.is_unique == 1;\n                        indexInfo.isPrimaryKey = resp.is_primary_key == 1;\n                        ent.Indexes.push(indexInfo);\n                    }\n                    indexColumnInfo.name = resp.columnname;\n                    indexColumnInfo.sqlName = resp.columnname;\n                    if (resp.is_primary_key == 0) {\n                        indexInfo.isPrimaryKey = false;\n                    }\n                    indexInfo.columns.push(indexColumnInfo);\n                });\n        });\n\n        return entities;\n    }\n    async GetRelations(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let response: {\n            tablewithforeignkey: string;\n            fk_partno: number;\n            foreignkeycolumn: string;\n            tablereferenced: string;\n            foreignkeycolumnreferenced: string;\n            ondelete: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n            onupdate: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n            object_id: string;\n        }[] = (await this.Connection.query(`SELECT\n            con.relname AS tablewithforeignkey,\n            att.attnum as fk_partno,\n                 att2.attname AS foreignkeycolumn,\n              cl.relname AS tablereferenced,\n              att.attname AS foreignkeycolumnreferenced,\n              delete_rule as ondelete,\n              update_rule as onupdate,\n                con.conname as object_id\n               FROM (\n                   SELECT\n                     unnest(con1.conkey) AS parent,\n                     unnest(con1.confkey) AS child,\n                     con1.confrelid,\n                     con1.conrelid,\n                     cl_1.relname,\n                   con1.conname\n                   FROM\n                     pg_class cl_1,\n                     pg_namespace ns,\n                     pg_constraint con1\n                   WHERE\n                     con1.contype = 'f'::\"char\"\n                     AND cl_1.relnamespace = ns.oid\n                     AND con1.conrelid = cl_1.oid\n                     and nspname in (${schema})\n              ) con,\n                pg_attribute att,\n                pg_class cl,\n                pg_attribute att2,\n                information_schema.referential_constraints rc\n              WHERE\n                att.attrelid = con.confrelid\n                AND att.attnum = con.child\n                AND cl.oid = con.confrelid\n                AND att2.attrelid = con.conrelid\n                AND att2.attnum = con.parent\n                and rc.constraint_name= con.conname`)).rows;\n        let relationsTemp: RelationTempInfo[] = <RelationTempInfo[]>[];\n        response.forEach(resp => {\n            let rels = relationsTemp.find(val => {\n                return val.object_id == resp.object_id;\n            });\n            if (rels == undefined) {\n                rels = <RelationTempInfo>{};\n                rels.ownerColumnsNames = [];\n                rels.referencedColumnsNames = [];\n                rels.actionOnDelete =\n                    resp.ondelete == \"NO ACTION\" ? null : resp.ondelete;\n                rels.actionOnUpdate =\n                    resp.onupdate == \"NO ACTION\" ? null : resp.onupdate;\n                rels.object_id = resp.object_id;\n                rels.ownerTable = resp.tablewithforeignkey;\n                rels.referencedTable = resp.tablereferenced;\n                relationsTemp.push(rels);\n            }\n            rels.ownerColumnsNames.push(resp.foreignkeycolumn);\n            rels.referencedColumnsNames.push(resp.foreignkeycolumnreferenced);\n        });\n        entities = this.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities\n        );\n        return entities;\n    }\n    async DisconnectFromServer() {\n        if (this.Connection) {\n            let promise = new Promise<boolean>((resolve, reject) => {\n                this.Connection.end(err => {\n                    if (!err) {\n                        resolve(true);\n                    } else {\n                        TomgUtils.LogError(\n                            \"Error connecting to Postgres Server.\",\n                            false,\n                            err.message\n                        );\n                        reject(err);\n                    }\n                });\n            });\n            await promise;\n        }\n    }\n\n    async ConnectToServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        ssl: boolean\n    ) {\n        this.Connection = new PG.Client({\n            database: database,\n            host: server,\n            port: port,\n            user: user,\n            password: password,\n            ssl: ssl\n        });\n\n        let promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection.connect(err => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to Postgres Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    async CreateDB(dbName: string) {\n        await this.Connection.query(`CREATE DATABASE ${dbName}; `);\n    }\n    async UseDB(dbName: string) {\n        await this.Connection.query(`USE ${dbName}; `);\n    }\n    async DropDB(dbName: string) {\n        await this.Connection.query(`DROP DATABASE ${dbName}; `);\n    }\n    async CheckIfDBExists(dbName: string): Promise<boolean> {\n        let resp = await this.Connection.query(\n            `SELECT datname FROM pg_database  WHERE datname  ='${dbName}' `\n        );\n        return resp.rowCount > 0;\n    }\n}\n"]}