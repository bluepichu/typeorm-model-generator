{"version":3,"sources":["../src/drivers/MssqlDriver.ts"],"names":[],"mappings":"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","file":"MssqlDriver.js","sourcesContent":["import { AbstractDriver } from \"./AbstractDriver\";\nimport * as MSSQL from \"mssql\";\nimport { ColumnInfo } from \"../models/ColumnInfo\";\nimport { EntityInfo } from \"../models/EntityInfo\";\nimport { EnumInfo } from \"../models/EnumInfo\";\nimport * as TomgUtils from \"../Utils\";\n\nexport class MssqlDriver extends AbstractDriver {\n    GetAllTablesQuery = async (schema: string) => {\n        let request = new MSSQL.Request(this.Connection);\n        let response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n        }[] = (await request.query(\n            `SELECT TABLE_SCHEMA,TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' and TABLE_SCHEMA in (${schema})`\n        )).recordset;\n        return response;\n    };\n\n    async GetCoulmnsFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let request = new MSSQL.Request(this.Connection);\n        let response: {\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            COLUMN_DEFAULT: string;\n            IS_NULLABLE: string;\n            DATA_TYPE: string;\n            CHARACTER_MAXIMUM_LENGTH: number;\n            NUMERIC_PRECISION: number;\n            NUMERIC_SCALE: number;\n            IsIdentity: number;\n            IsUnique: number;\n        }[] = (await request.query(`SELECT TABLE_NAME,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,\n   DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,\n   COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') IsIdentity,\n   (SELECT count(*)\n    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n        inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu\n            on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n    where\n        tc.CONSTRAINT_TYPE = 'UNIQUE'\n        and tc.TABLE_NAME = c.TABLE_NAME\n        and cu.COLUMN_NAME = c.COLUMN_NAME\n        and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique\n   FROM INFORMATION_SCHEMA.COLUMNS c where TABLE_SCHEMA in (${schema})`))\n            .recordset;\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TABLE_NAME == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let colInfo: ColumnInfo = new ColumnInfo();\n                    colInfo.tsName = resp.COLUMN_NAME;\n                    colInfo.sqlName = resp.COLUMN_NAME;\n                    colInfo.is_nullable = resp.IS_NULLABLE == \"YES\";\n                    colInfo.is_generated = resp.IsIdentity == 1;\n                    colInfo.is_unique = resp.IsUnique == 1;\n                    colInfo.default = resp.COLUMN_DEFAULT;\n                    colInfo.sql_type = resp.DATA_TYPE;\n                    switch (resp.DATA_TYPE) {\n                        case \"bigint\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"bit\":\n                            colInfo.ts_type = \"boolean\";\n                            break;\n                        case \"decimal\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"int\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"money\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"numeric\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"smallint\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"smallmoney\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"tinyint\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"float\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"real\":\n                            colInfo.ts_type = \"number\";\n                            break;\n                        case \"date\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"datetime2\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"datetime\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"datetimeoffset\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"smalldatetime\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"time\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"char\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"text\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"varchar\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"nchar\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"ntext\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"nvarchar\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"binary\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"image\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"varbinary\":\n                            colInfo.ts_type = \"Buffer\";\n                            break;\n                        case \"hierarchyid\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"sql_variant\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"timestamp\":\n                            colInfo.ts_type = \"Date\";\n                            break;\n                        case \"uniqueidentifier\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"xml\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"geometry\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        case \"geography\":\n                            colInfo.ts_type = \"string\";\n                            break;\n                        default:\n                            TomgUtils.LogError(\n                                `Unknown column type: ${\n                                    resp.DATA_TYPE\n                                }  table name: ${\n                                    resp.TABLE_NAME\n                                } column name: ${resp.COLUMN_NAME}`\n                            );\n                            break;\n                    }\n\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.numericPrecision = resp.NUMERIC_PRECISION;\n                        colInfo.numericScale = resp.NUMERIC_SCALE;\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            v => v == colInfo.sql_type\n                        )\n                    ) {\n                        colInfo.lenght =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : null;\n                    }\n\n                    if (colInfo.sql_type) ent.Columns.push(colInfo);\n                });\n        });\n        return entities;\n    }\n    async GetIndexesFromEntity(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let request = new MSSQL.Request(this.Connection);\n        let response: {\n            TableName: string;\n            IndexName: string;\n            ColumnName: string;\n            is_unique: number;\n            is_primary_key: number;\n        }[] = (await request.query(`SELECT\n     TableName = t.name,\n     IndexName = ind.name,\n     ColumnName = col.name,\n     ind.is_unique,\n     ind.is_primary_key\nFROM\n     sys.indexes ind\nINNER JOIN\n     sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id\nINNER JOIN\n     sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id\nINNER JOIN\n     sys.tables t ON ind.object_id = t.object_id\nINNER JOIN\n     sys.schemas s on s.schema_id=t.schema_id\nWHERE\n     t.is_ms_shipped = 0 and s.name in (${schema})\nORDER BY\n     t.name, ind.name, ind.index_id, ic.key_ordinal;`)).recordset;\n        entities.forEach(ent => {\n            response\n                .filter(filterVal => {\n                    return filterVal.TableName == ent.EntityName;\n                })\n                .forEach(resp => {\n                    let indexInfo: IndexInfo = <IndexInfo>{};\n                    let indexColumnInfo: IndexColumnInfo = <IndexColumnInfo>{};\n                    if (\n                        ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.IndexName;\n                        }).length > 0\n                    ) {\n                        indexInfo = ent.Indexes.filter(filterVal => {\n                            return filterVal.name == resp.IndexName;\n                        })[0];\n                    } else {\n                        indexInfo.columns = <IndexColumnInfo[]>[];\n                        indexInfo.name = resp.IndexName;\n                        indexInfo.isUnique = resp.is_unique == 1;\n                        indexInfo.isPrimaryKey = resp.is_primary_key == 1;\n                        ent.Indexes.push(indexInfo);\n                    }\n                    indexColumnInfo.name = resp.ColumnName;\n                    indexInfo.columns.push(indexColumnInfo);\n                });\n        });\n\n        return entities;\n    }\n    async GetRelations(\n        entities: EntityInfo[],\n        schema: string\n    ): Promise<EntityInfo[]> {\n        let request = new MSSQL.Request(this.Connection);\n        let response: {\n            TableWithForeignKey: string;\n            FK_PartNo: number;\n            ForeignKeyColumn: string;\n            TableReferenced: string;\n            ForeignKeyColumnReferenced: string;\n            onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            object_id: number;\n        }[] = (await request.query(`select\n    parentTable.name as TableWithForeignKey,\n    fkc.constraint_column_id as FK_PartNo,\n     parentColumn.name as ForeignKeyColumn,\n     referencedTable.name as TableReferenced,\n     referencedColumn.name as ForeignKeyColumnReferenced,\n     fk.delete_referential_action_desc as onDelete,\n     fk.update_referential_action_desc as onUpdate,\n     fk.object_id\nfrom\n    sys.foreign_keys fk\ninner join\n    sys.foreign_key_columns as fkc on fkc.constraint_object_id=fk.object_id\ninner join\n    sys.tables as parentTable on fkc.parent_object_id = parentTable.object_id\ninner join\n    sys.columns as parentColumn on fkc.parent_object_id = parentColumn.object_id and fkc.parent_column_id = parentColumn.column_id\ninner join\n    sys.tables as referencedTable on fkc.referenced_object_id = referencedTable.object_id\ninner join\n    sys.columns as referencedColumn on fkc.referenced_object_id = referencedColumn.object_id and fkc.referenced_column_id = referencedColumn.column_id\ninner join\n\tsys.schemas as parentSchema on parentSchema.schema_id=parentTable.schema_id\nwhere\n    fk.is_disabled=0 and fk.is_ms_shipped=0 and parentSchema.name in (${schema})\norder by\n    TableWithForeignKey, FK_PartNo`)).recordset;\n        let relationsTemp: RelationTempInfo[] = <RelationTempInfo[]>[];\n        response.forEach(resp => {\n            let rels = relationsTemp.find(val => {\n                return val.object_id == resp.object_id;\n            });\n            if (rels == undefined) {\n                rels = <RelationTempInfo>{};\n                rels.ownerColumnsNames = [];\n                rels.referencedColumnsNames = [];\n                switch (resp.onDelete) {\n                    case \"NO_ACTION\":\n                        rels.actionOnDelete = null;\n                        break;\n                    case \"SET_NULL\":\n                        rels.actionOnDelete = \"SET NULL\";\n                        break;\n                    default:\n                        rels.actionOnDelete = resp.onDelete;\n\n                        break;\n                }\n                switch (resp.onUpdate) {\n                    case \"NO_ACTION\":\n                        rels.actionOnUpdate = null;\n                        break;\n                    case \"SET_NULL\":\n                        rels.actionOnUpdate = \"SET NULL\";\n                        break;\n                    default:\n                        rels.actionOnUpdate = resp.onUpdate;\n\n                        break;\n                }\n                rels.object_id = resp.object_id;\n                rels.ownerTable = resp.TableWithForeignKey;\n                rels.referencedTable = resp.TableReferenced;\n                relationsTemp.push(rels);\n            }\n            rels.ownerColumnsNames.push(resp.ForeignKeyColumn);\n            rels.referencedColumnsNames.push(resp.ForeignKeyColumnReferenced);\n        });\n        entities = this.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities\n        );\n        return entities;\n    }\n    async GetEnums(schema: string): Promise<EnumInfo[]> {\n        return [];\n    }\n    async DisconnectFromServer() {\n        if (this.Connection) await this.Connection.close();\n    }\n\n    private Connection: MSSQL.ConnectionPool;\n    async ConnectToServer(\n        database: string,\n        server: string,\n        port: number,\n        user: string,\n        password: string,\n        ssl: boolean\n    ) {\n        let config: MSSQL.config = {\n            database: database,\n            server: server,\n            port: port,\n            user: user,\n            password: password,\n            options: {\n                encrypt: ssl,\n                appName: \"typeorm-model-generator\"\n            }\n        };\n\n        let promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection = new MSSQL.ConnectionPool(config, err => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to MSSQL Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n    async CreateDB(dbName: string) {\n        let request = new MSSQL.Request(this.Connection);\n        await request.query(`CREATE DATABASE ${dbName}; `);\n    }\n    async UseDB(dbName: string) {\n        let request = new MSSQL.Request(this.Connection);\n        await request.query(`USE ${dbName}; `);\n    }\n    async DropDB(dbName: string) {\n        let request = new MSSQL.Request(this.Connection);\n        await request.query(`DROP DATABASE ${dbName}; `);\n    }\n    async CheckIfDBExists(dbName: string): Promise<boolean> {\n        let request = new MSSQL.Request(this.Connection);\n        let resp = await request.query(\n            `SELECT name FROM master.sys.databases WHERE name = N'${dbName}' `\n        );\n        return resp.recordset.length > 0;\n    }\n}\n"]}