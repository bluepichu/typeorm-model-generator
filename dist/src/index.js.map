{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { AbstractDriver } from \"./drivers/AbstractDriver\";\nimport { Engine } from \"./Engine\";\nimport * as Yargs from \"yargs\";\nimport * as TomgUtils from \"./Utils\";\nimport path = require(\"path\");\nimport { AbstractNamingStrategy } from \"./AbstractNamingStrategy\";\nimport { NamingStrategy } from \"./NamingStrategy\";\n\nvar argv = Yargs.usage(\n    \"Usage: typeorm-model-generator -h <host> -d <database> -p [port] -u <user> -x [password] -e [engine]\"\n)\n    .option(\"h\", {\n        alias: \"host\",\n        describe: \"IP adress/Hostname for database server\",\n        default: \"127.0.0.1\"\n    })\n    .option(\"d\", {\n        alias: \"database\",\n        describe: \"Database name(or path for sqlite)\",\n        demand: true\n    })\n    .option(\"u\", {\n        alias: \"user\",\n        describe: \"Username for database server\"\n    })\n    .option(\"x\", {\n        alias: \"pass\",\n        describe: \"Password for database server\",\n        default: \"\"\n    })\n    .option(\"p\", {\n        alias: \"port\",\n        describe: \"Port number for database server\"\n    })\n    .option(\"e\", {\n        alias: \"engine\",\n        describe: \"Database engine\",\n        choices: [\"mssql\", \"postgres\", \"mysql\", \"mariadb\", \"oracle\", \"sqlite\"],\n        default: \"mssql\"\n    })\n    .option(\"o\", {\n        alias: \"output\",\n        describe: \"Where to place generated models\",\n        default: path.resolve(process.cwd(), \"output\")\n    })\n    .option(\"s\", {\n        alias: \"schema\",\n        describe:\n            \"Schema name to create model from. Only for mssql and postgres\"\n    })\n    .option(\"ssl\", {\n        boolean: true,\n        default: false\n    })\n    .option(\"noConfig\", {\n        boolean: true,\n        describe: `Doesn't create tsconfig.json and ormconfig.json`,\n        default: false\n    })\n    .option(\"cf\", {\n        alias: \"case-file\",\n        describe: \"Convert file names to specified case\",\n        choices: [\"pascal\", \"param\", \"camel\", \"none\"],\n        default: \"none\"\n    })\n    .option(\"ce\", {\n        alias: \"case-entity\",\n        describe: \"Convert class names to specified case\",\n        choices: [\"pascal\", \"camel\", \"none\"],\n        default: \"none\"\n    })\n    .option(\"cp\", {\n        alias: \"case-property\",\n        describe: \"Convert property names to specified case\",\n        choices: [\"pascal\", \"camel\", \"none\"],\n        default: \"none\"\n    })\n    .option(\"ri\", {\n        alias: \"remove-id\",\n        describe: \"Remove _id suffix from fields\",\n        default: false\n    })\n    .option(\"lazy\", {\n        describe: \"Generate lazy relations\",\n        boolean: true,\n        default: false\n    })\n    .option(\"namingStrategy\", {\n        describe: \"Use custom naming strategy\"\n    })\n    .option(\"relationIds\", {\n        describe: \"Generate RelationId fields\",\n        boolean: true,\n        default: false\n    })\n    .option(\"generateConstructor\", {\n        describe: \"Generate constructor allowing partial initialization\",\n        default: false\n    }).argv;\n\nlet driver: AbstractDriver;\nlet standardPort: number;\nlet standardSchema: string = \"\";\nlet standardUser: string = \"\";\nswitch (argv.e) {\n    case \"mssql\":\n        driver = new (require(\"./drivers/MssqlDriver\").MssqlDriver)();\n        standardPort = 1433;\n        standardSchema = \"dbo\";\n        standardUser = \"sa\";\n        break;\n    case \"postgres\":\n        driver = new (require(\"./drivers/PostgresDriver\").PostgresDriver)();\n        standardPort = 5432;\n        standardSchema = \"public\";\n        standardUser = \"postgres\";\n        break;\n    case \"mysql\":\n        driver = new (require(\"./drivers/MysqlDriver\").MysqlDriver)();\n        standardPort = 3306;\n        standardUser = \"root\";\n        break;\n    case \"mariadb\":\n        driver = new (require(\"./drivers/MariaDbDriver\").MariaDbDriver)();\n        standardPort = 3306;\n        standardUser = \"root\";\n        break;\n    case \"oracle\":\n        driver = new (require(\"./drivers/OracleDriver\").OracleDriver)();\n        standardPort = 1521;\n        standardUser = \"SYS\";\n        break;\n    case \"sqlite\":\n        driver = new (require(\"./drivers/SqliteDriver\").SqliteDriver)();\n        standardPort = 0;\n        break;\n    default:\n        TomgUtils.LogError(\"Database engine not recognized.\", false);\n        throw new Error(\"Database engine not recognized.\");\n}\nlet namingStrategy: AbstractNamingStrategy;\nif (argv.namingStrategy && argv.namingStrategy != \"\") {\n    let req = require(argv.namingStrategy);\n    namingStrategy = new req.NamingStrategy();\n} else {\n    namingStrategy = new NamingStrategy();\n}\n\nlet engine = new Engine(driver, {\n    host: argv.h,\n    port: parseInt(argv.p) || standardPort,\n    databaseName: argv.d ? argv.d.toString() : null,\n    user: argv.u ? argv.u.toString() : standardUser,\n    password: argv.x ? argv.x.toString() : null,\n    databaseType: argv.e,\n    resultsPath: argv.o ? argv.o.toString() : null,\n    schemaName: argv.s ? argv.s.toString() : standardSchema,\n    ssl: argv.ssl,\n    noConfigs: argv.noConfig,\n    convertCaseFile: argv.cf,\n    convertCaseEntity: argv.ce,\n    convertCaseProperty: argv.cp,\n    removeIdSuffix: argv.ri,\n    lazy: argv.lazy,\n    constructor: argv.generateConstructor,\n    relationIds: argv.relationIds,\n    namingStrategy: namingStrategy\n});\n\nconsole.log(TomgUtils.packageVersion());\nconsole.log(\n    `[${new Date().toLocaleTimeString()}] Starting creation of model classes.`\n);\nengine.createModelFromDatabase().then(() => {\n    console.info(\n        `[${new Date().toLocaleTimeString()}] Typeorm model classes created.`\n    );\n});\n"]}