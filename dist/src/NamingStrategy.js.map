{"version":3,"sources":["../src/NamingStrategy.ts"],"names":[],"mappings":";;AAAA,qEAAkE;AAIlE,oBAA4B,SAAQ,+CAAsB;IACtD,YAAY,CACR,aAAqB,EACrB,QAAsB,EACtB,OAAsB;QAEtB,IAAI,gBAAgB,GAAG,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,YAAY,CAAC;QACrE,IAAI,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAC1C,OAAO,CAAC,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC;QAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACN,IAAI,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAC/C,OAAO,CAAC,CAAC,UAAU,IAAI,QAAQ,CAAC,YAAY,CAAC;QACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEN,IAAI,UAAU,GACV,aAAa,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;YAC9B,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;QACrD,IACI,UAAU;aACL,WAAW,EAAE;aACb,QAAQ,CACL,KAAK,CACR,CAAC,wEAAwE,EAChF;YACE,UAAU,GAAG,UAAU,CAAC,SAAS,CAC7B,CAAC,EACD,UAAU,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAC9C,CAAC;SACL;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YACrD,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YACrD,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC/D;QACD,UAAU,IAAI,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAE1C,IACI,QAAQ,CAAC,YAAY,IAAI,YAAY;YACrC,aAAa,IAAI,UAAU,EAC7B;YACE,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,UAAU,CAAC,EAAE;gBACvD,UAAU,GAAG,UAAU,GAAG,GAAG,CAAC;gBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClD,UAAU;wBACN,UAAU,CAAC,SAAS,CAChB,CAAC,EACD,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,CAC1C,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;oBACrB,IACI,WAAW,CAAC,OAAO,CAAC,KAAK,CACrB,CAAC,CAAC,EAAE,CACA,CAAC,CAAC,MAAM,IAAI,UAAU;wBACtB,UAAU,IAAI,aAAa,CAClC;wBAED,MAAM;iBACb;aACJ;SACJ;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,UAAkB;QACzB,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,UAAkB;QACzB,OAAO,UAAU,CAAC;IACtB,CAAC;CACJ;AAvED,wCAuEC","file":"NamingStrategy.js","sourcesContent":["import { AbstractNamingStrategy } from \"./AbstractNamingStrategy\";\nimport { RelationInfo } from \"./models/RelationInfo\";\nimport { DatabaseModel } from \"./models/DatabaseModel\";\n\nexport class NamingStrategy extends AbstractNamingStrategy {\n    relationName(\n        columnOldName: string,\n        relation: RelationInfo,\n        dbModel: DatabaseModel\n    ): string {\n        let isRelationToMany = relation.isOneToMany || relation.isManyToMany;\n        let ownerEntity = dbModel.entities.filter(v => {\n            return v.EntityName == relation.ownerTable;\n        })[0];\n        let referencedEntity = dbModel.entities.filter(v => {\n            return v.EntityName == relation.relatedTable;\n        })[0];\n\n        let columnName =\n            columnOldName[0].toLowerCase() +\n            columnOldName.substring(1, columnOldName.length);\n        if (\n            columnName\n                .toLowerCase()\n                .endsWith(\n                    \"_id\"\n                ) /*&& !ownerEntity.Columns.some(x=>x.tsName==columnName && x.isPrimary)*/\n        ) {\n            columnName = columnName.substring(\n                0,\n                columnName.toLowerCase().lastIndexOf(\"_id\")\n            );\n        }\n        if (!isNaN(parseInt(columnName[columnName.length - 1]))) {\n            columnName = columnName.substring(0, columnName.length - 1);\n        }\n        if (!isNaN(parseInt(columnName[columnName.length - 1]))) {\n            columnName = columnName.substring(0, columnName.length - 1);\n        }\n        columnName += isRelationToMany ? \"s\" : \"\";\n\n        if (\n            relation.relationType != \"ManyToMany\" &&\n            columnOldName != columnName\n        ) {\n            if (ownerEntity.Columns.some(v => v.tsName == columnName)) {\n                columnName = columnName + \"_\";\n                for (let i = 2; i <= ownerEntity.Columns.length; i++) {\n                    columnName =\n                        columnName.substring(\n                            0,\n                            columnName.length - i.toString().length\n                        ) + i.toString();\n                    if (\n                        ownerEntity.Columns.every(\n                            v =>\n                                v.tsName != columnName ||\n                                columnName == columnOldName\n                        )\n                    )\n                        break;\n                }\n            }\n        }\n\n        return columnName;\n    }\n\n    entityName(entityName: string): string {\n        return entityName;\n    }\n\n    columnName(columnName: string): string {\n        return columnName;\n    }\n}\n"]}