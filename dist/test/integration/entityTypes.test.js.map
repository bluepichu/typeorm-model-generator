{"version":3,"sources":["../test/integration/entityTypes.test.ts"],"names":[],"mappings":"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","file":"entityTypes.test.js","sourcesContent":["require('dotenv').config()\nimport \"reflect-metadata\";\nimport fs = require('fs-extra');\nimport path = require('path')\nimport { expect } from \"chai\";\nimport { EntityFileToJson } from \"../utils/EntityFileToJson\";\nvar chai = require('chai');\nvar chaiSubset = require('chai-subset');\nimport * as ts from \"typescript\";\nimport * as GTU from \"../utils/GeneralTestUtils\"\nimport { Engine } from \"../../src/Engine\";\n\nchai.use(chaiSubset);\n\ndescribe(\"Platform specyfic types\", async function () {\n    this.timeout(30000)\n    this.slow(5000)//compiling created models takes time\n\n    let dbDrivers: string[] = []\n    if (process.env.SQLITE_Skip == '0') dbDrivers.push('sqlite')\n    if (process.env.POSTGRES_Skip == '0') dbDrivers.push('postgres')\n    if (process.env.MYSQL_Skip == '0') dbDrivers.push('mysql')\n    if (process.env.MARIADB_Skip == '0') dbDrivers.push('mariadb')\n    if (process.env.MSSQL_Skip == '0') dbDrivers.push('mssql')\n    if (process.env.ORACLE_Skip == '0') dbDrivers.push('oracle')\n\n    let examplesPathJS = path.resolve(process.cwd(), 'dist/test/integration/entityTypes')\n    let examplesPathTS = path.resolve(process.cwd(), 'test/integration/entityTypes')\n    let files = fs.readdirSync(examplesPathTS)\n\n    for (let dbDriver of dbDrivers) {\n        for (let folder of files) {\n            if (dbDriver == folder) {\n                it(dbDriver, async function () {\n\n                    let filesOrgPathJS = path.resolve(examplesPathJS, folder, 'entity')\n                    let filesOrgPathTS = path.resolve(examplesPathTS, folder, 'entity')\n                    let resultsPath = path.resolve(process.cwd(), `output`)\n                    fs.removeSync(resultsPath)\n\n                    let engine: Engine;\n                    switch (dbDriver) {\n                        case 'sqlite':\n                            engine = await GTU.createSQLiteModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'postgres':\n                            engine = await GTU.createPostgresModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mysql':\n                            engine = await GTU.createMysqlModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mariadb':\n                            engine = await GTU.createMariaDBModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mssql':\n                            engine = await GTU.createMSSQLModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'oracle':\n                            engine = await GTU.createOracleDBModels(filesOrgPathJS, resultsPath)\n                            break;\n                        default:\n                            console.log(`Unknown engine type`);\n                            engine = <Engine>{}\n                            break;\n                    }\n\n                    await engine.createModelFromDatabase()\n                    let filesGenPath = path.resolve(resultsPath, 'entities')\n\n                    let filesOrg = fs.readdirSync(filesOrgPathTS).filter(function (this, val, ind, arr) { return val.toString().endsWith('.ts') })\n                    let filesGen = fs.readdirSync(filesGenPath).filter(function (this, val, ind, arr) { return val.toString().endsWith('.ts') })\n\n                    expect(filesOrg, 'Errors detected in model comparision').to.be.deep.equal(filesGen)\n\n                    for (let file of filesOrg) {\n                        let entftj = new EntityFileToJson();\n                        let jsonEntityOrg = entftj.convert(fs.readFileSync(path.resolve(filesOrgPathTS, file)))\n                        let jsonEntityGen = entftj.convert(fs.readFileSync(path.resolve(filesGenPath, file)))\n                        expect(jsonEntityGen, `Error in file ${file}`).to.containSubset(jsonEntityOrg)\n                    }\n                    const currentDirectoryFiles = fs.readdirSync(filesGenPath).\n                        filter(fileName => fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === \".ts\").map(v => {\n                            return path.resolve(filesGenPath, v)\n                        })\n                    let compileErrors = GTU.compileTsFiles(currentDirectoryFiles, {\n                        experimentalDecorators: true,\n                        sourceMap: false,\n                        emitDecoratorMetadata: true,\n                        target: ts.ScriptTarget.ES2016,\n                        moduleResolution: ts.ModuleResolutionKind.NodeJs,\n                        module: ts.ModuleKind.CommonJS\n                    });\n                    expect(compileErrors, 'Errors detected while compiling generated model').to.be.false;\n                });\n            }\n        }\n    }\n})\n"]}