{"version":3,"sources":["../test/integration/githubIssues.test.ts"],"names":[],"mappings":"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","file":"githubIssues.test.js","sourcesContent":["require('dotenv').config()\nimport \"reflect-metadata\";\nimport { createConnection, ConnectionOptions, Connection } from \"typeorm\";\nimport fs = require('fs-extra');\nimport path = require('path')\nimport { Engine } from \"../../src/Engine\";\nimport { expect } from \"chai\";\nimport * as Sinon from 'sinon'\nimport { EntityFileToJson } from \"../utils/EntityFileToJson\";\nvar chai = require('chai');\nvar chaiSubset = require('chai-subset');\nimport * as ts from \"typescript\";\nimport * as GTU from \"../utils/GeneralTestUtils\"\n\nchai.use(chaiSubset);\n\n\ndescribe(\"GitHub issues\", async function () {\n    this.timeout(30000)\n    this.slow(5000)//compiling created models takes time\n\n    let dbDrivers: string[] = []\n    if (process.env.SQLITE_Skip == '0') dbDrivers.push('sqlite')\n    if (process.env.POSTGRES_Skip == '0') dbDrivers.push('postgres')\n    if (process.env.MYSQL_Skip == '0') dbDrivers.push('mysql')\n    if (process.env.MARIADB_Skip == '0') dbDrivers.push('mariadb')\n    if (process.env.MSSQL_Skip == '0') dbDrivers.push('mssql')\n    if (process.env.ORACLE_Skip == '0') dbDrivers.push('oracle')\n\n    let examplesPathJS = path.resolve(process.cwd(), 'dist/test/integration/github-issues')\n    let examplesPathTS = path.resolve(process.cwd(), 'test/integration/github-issues')\n    let files = fs.readdirSync(examplesPathTS)\n\n    for (let folder of files) {\n\n        describe(`#${folder}`, async function () {\n            for (let dbDriver of dbDrivers) {\n\n                switch (folder) {\n                    case '39':\n                        if (dbDriver == 'mysql' || dbDriver == 'mariadb' || dbDriver == 'oracle' || dbDriver == 'sqlite')\n                            continue;\n                        break;\n                    default:\n                        break;\n                }\n\n                it(dbDriver, async function () {\n\n                    let filesOrgPathJS = path.resolve(examplesPathJS, folder, 'entity')\n                    let filesOrgPathTS = path.resolve(examplesPathTS, folder, 'entity')\n                    let resultsPath = path.resolve(process.cwd(), `output`)\n                    fs.removeSync(resultsPath)\n\n                    let engine: Engine;\n                    switch (dbDriver) {\n                        case 'sqlite':\n                            engine = await GTU.createSQLiteModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'postgres':\n                            engine = await GTU.createPostgresModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mysql':\n                            engine = await GTU.createMysqlModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mariadb':\n                            engine = await GTU.createMariaDBModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'mssql':\n                            engine = await GTU.createMSSQLModels(filesOrgPathJS, resultsPath)\n                            break;\n                        case 'oracle':\n                            engine = await GTU.createOracleDBModels(filesOrgPathJS, resultsPath)\n                            break;\n                        default:\n                            console.log(`Unknown engine type`);\n                            engine = <Engine>{}\n                            break;\n                    }\n\n                    switch (folder) {\n                        case '65':\n                            engine.Options.relationIds = true;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    await engine.createModelFromDatabase()\n                    let filesGenPath = path.resolve(resultsPath, 'entities')\n\n                    let filesOrg = fs.readdirSync(filesOrgPathTS).filter(function (this, val) { return val.toString().endsWith('.ts') })\n                    let filesGen = fs.readdirSync(filesGenPath).filter(function (this, val) { return val.toString().endsWith('.ts') })\n\n                    expect(filesOrg, 'Errors detected in model comparision').to.be.deep.equal(filesGen)\n\n                    for (let file of filesOrg) {\n                        let entftj = new EntityFileToJson();\n                        let jsonEntityOrg = entftj.convert(fs.readFileSync(path.resolve(filesOrgPathTS, file)))\n                        let jsonEntityGen = entftj.convert(fs.readFileSync(path.resolve(filesGenPath, file)))\n                        expect(jsonEntityGen, `Error in file ${file}`).to.containSubset(jsonEntityOrg)\n                    }\n                    const currentDirectoryFiles = fs.readdirSync(filesGenPath).\n                        filter(fileName => fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === \".ts\").map(v => {\n                            return path.resolve(filesGenPath, v)\n                        })\n                    let compileErrors = GTU.compileTsFiles(currentDirectoryFiles, {\n                        experimentalDecorators: true,\n                        sourceMap: false,\n                        emitDecoratorMetadata: true,\n                        target: ts.ScriptTarget.ES2016,\n                        moduleResolution: ts.ModuleResolutionKind.NodeJs,\n                        module: ts.ModuleKind.CommonJS\n                    });\n                    expect(compileErrors, 'Errors detected while compiling generated model').to.be.false;\n                });\n\n            }\n        })\n    }\n})\n"]}