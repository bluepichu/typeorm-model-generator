{"version":3,"sources":["../test/utils/EntityFileToJson.ts"],"names":[],"mappings":"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","file":"EntityFileToJson.js","sourcesContent":["\nexport class EntityFileToJson {\n    getEntityOptions(trimmedLine: string, ent: EntityJson) {\n        let decoratorParameters = trimmedLine.slice(trimmedLine.indexOf('(') + 1, trimmedLine.lastIndexOf(')'))\n        if (decoratorParameters.length > 0) {\n            if (decoratorParameters[0] == '\"' && decoratorParameters.endsWith('\"')) {\n\n            } else {\n                let badJSON = decoratorParameters.substring(decoratorParameters.indexOf(',') + 1).trim()\n                if (badJSON.lastIndexOf(',') == badJSON.length - 3) {\n                    badJSON = badJSON.slice(0, badJSON.length - 3) + badJSON[badJSON.length - 2] + badJSON[badJSON.length - 1]\n                }\n                ent.entityOptions = JSON.parse(badJSON.replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": '))\n            }\n        }\n    }\n    getColumnOptionsAndType(trimmedLine: string, col: EntityColumn) {\n        let decoratorParameters = trimmedLine.slice(trimmedLine.indexOf('(') + 1, trimmedLine.lastIndexOf(')'))\n        if (decoratorParameters.length > 0) {\n            if (decoratorParameters.search(',') > 0) {\n                col.columnTypes = decoratorParameters.substring(0, decoratorParameters.indexOf(',')).trim().split('|').map(function (x) {\n                    return x;\n                });\n                let badJSON = decoratorParameters.substring(decoratorParameters.indexOf(',') + 1).trim()\n                if (badJSON.lastIndexOf(',') == badJSON.length - 3) {\n                    badJSON = badJSON.slice(0, badJSON.length - 3) + badJSON[badJSON.length - 2] + badJSON[badJSON.length - 1]\n                }\n                col.columnOptions = JSON.parse(badJSON.replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": '))\n            } else {\n                if (decoratorParameters[0] == '\"' && decoratorParameters.endsWith('\"')) {\n                    col.columnTypes = decoratorParameters.split('|').map(function (x) {\n                        x = x.trim();\n                        return x;\n                    });\n                } else {\n                    let badJSON = decoratorParameters.substring(decoratorParameters.indexOf(',') + 1).trim()\n                    if (badJSON.lastIndexOf(',') == badJSON.length - 3) {\n                        badJSON = badJSON.slice(0, badJSON.length - 3) + badJSON[badJSON.length - 2] + badJSON[badJSON.length - 1]\n                    }\n                    col.columnOptions = JSON.parse(badJSON.replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": '))\n                }\n            }\n        }\n    }\n    getRelationOptions(trimmedLine:string, col:EntityColumn){\n        let decoratorParameters = trimmedLine.slice(trimmedLine.indexOf('(') + 1, trimmedLine.lastIndexOf(')'))\n         if (decoratorParameters.length > 0) {\n             let params = decoratorParameters.match(/(,)(?!([^{]*}))/g)\n            if ( params && params.length == 2) {\n                let badJSON = decoratorParameters.substring( decoratorParameters.lastIndexOf('{'),decoratorParameters.lastIndexOf('}')+1).trim()\n                if (badJSON.lastIndexOf(',') == badJSON.length - 3) {\n                    badJSON = badJSON.slice(0, badJSON.length - 3) + badJSON[badJSON.length - 2] + badJSON[badJSON.length - 1]\n                }\n                col.columnOptions = JSON.parse(badJSON.replace(/(')/g,`\"`).replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?:/g, '\"$2\": '))\n            } else {\n\n            }\n        }\n    }\n    getIndexOptions(trimmedLine: string, ind: EntityIndex) {\n        let decoratorParameters = trimmedLine.slice(trimmedLine.indexOf('(') + 1, trimmedLine.lastIndexOf(')'))\n\n        if (decoratorParameters.length > 0) {\n            let containsTables = decoratorParameters.search('\\\\[') > -1\n            let containsOptions = decoratorParameters.search('{') > -1\n            let containsName = decoratorParameters.search('\"') > -1//TODO:no name, but fields as string[]\n            if (containsName) {\n                ind.indexName = decoratorParameters.slice(decoratorParameters.indexOf('\"') + 1, decoratorParameters.substr(decoratorParameters.indexOf('\"') + 1).indexOf('\"'))\n            }\n            if (containsTables) {\n                let columnsStr = decoratorParameters.slice(decoratorParameters.indexOf('[') + 1, decoratorParameters.indexOf(']'))\n                ind.columnNames.push(...columnsStr.split(',').map((val) => {\n                    let colName = ''\n                    if (val.search('\\\\.') > -1) {\n                        colName = val.split('.')[1]\n                    } else {\n                        colName = val.slice(val.indexOf('\"') + 1, val.lastIndexOf('\"'))\n                    }\n                    return colName\n                }).filter(v => {\n                    return v.length > 0\n                }))\n            }\n            if (containsOptions) {\n                let optionsStr = decoratorParameters.slice(decoratorParameters.indexOf('{') + 1, decoratorParameters.indexOf('}'))\n                optionsStr.split(',').forEach((v) => {\n                    if (v.split(':').length - 1 > 0) {\n                        switch (optionsStr.split(':')[0].trim()) {\n                            case \"unique\":\n                                ind.isUnique = optionsStr.split(':')[1].trim() == 'true' ? true : false;\n                                break;\n                            default:\n                                console.log(`[EntityFileToJson:convert] Index option not recognized ${ind.indexName}:`)\n                                console.log(`${optionsStr}`)\n                                break;\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    convert(entityFile: Buffer): EntityJson {\n        let retVal = new EntityJson();\n\n        let isInClassBody = false;\n        let isMultilineStatement = false;\n        let priorPartOfMultilineStatement = '';\n\n        let lines = entityFile.toString().replace('\\r', '').split('\\n');\n        for (let line of lines) {\n            let trimmedLine = line.trim();\n            if (trimmedLine.startsWith('//')) {\n                continue;\n            }\n            if (isMultilineStatement)\n                trimmedLine = priorPartOfMultilineStatement + ' ' + trimmedLine\n            if (trimmedLine.length == 0)\n                continue;\n            else if (!isInClassBody) {\n                if (trimmedLine.startsWith('import')) {\n                    continue;\n                } else if (trimmedLine.startsWith('@Entity')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        this.getEntityOptions(trimmedLine, retVal);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('export class')) {\n                    retVal.entityName = trimmedLine.substring(trimmedLine.indexOf('class') + 5, trimmedLine.lastIndexOf('{')).trim().toLowerCase()\n                    isInClassBody = true;\n                    continue;\n                } else if (trimmedLine.startsWith('@Index')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let ind = new EntityIndex()\n                        this.getIndexOptions(trimmedLine, ind)\n                        retVal.indicies.push(ind);\n                        continue;\n                    }\n                }\n            } else {\n                if (trimmedLine.startsWith('@Column')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let col = new EntityColumn()\n                        this.getColumnOptionsAndType(trimmedLine, col)\n                        retVal.columns.push(col);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@PrimaryColumn')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let col = new EntityColumn()\n                        this.getColumnOptionsAndType(trimmedLine, col)\n                        col.columnOptions['primary'] = true\n                        retVal.columns.push(col);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@VersionColumn')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let col = new EntityColumn()\n                        this.getColumnOptionsAndType(trimmedLine, col)\n                        retVal.columns.push(col);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@PrimaryGeneratedColumn')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let col = new EntityColumn()\n                        this.getColumnOptionsAndType(trimmedLine, col)\n                        col.columnOptions['primary'] = true\n                        col.columnOptions['generated'] = true\n                        retVal.columns.push(col);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@ManyToOne')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let column = new EntityColumn()\n                        retVal.columns.push(column)\n                        column.relationType = \"ManyToOne\"\n                        column.isOwnerOfRelation = true;\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@OneToMany')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let column = new EntityColumn()\n                        retVal.columns.push(column)\n                        column.relationType = \"OneToMany\"\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@ManyToMany')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let column = new EntityColumn()\n                        retVal.columns.push(column)\n                        column.relationType = \"ManyToMany\"\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@OneToOne')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let column = new EntityColumn()\n                        retVal.columns.push(column)\n                        column.relationType = \"OneToOne\"\n                        this.getRelationOptions(trimmedLine,column);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@JoinColumn')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        retVal.columns[retVal.columns.length - 1].isOwnerOfRelation = true;\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@JoinTable')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        retVal.columns[retVal.columns.length - 1].isOwnerOfRelation = true;\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('@Index')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        let ind = new EntityIndex()\n                        this.getIndexOptions(trimmedLine, ind)\n                        retVal.indicies.push(ind);\n                        continue;\n                    }\n                } else if (trimmedLine.startsWith('constructor')) {\n                    if (this.isPartOfMultilineStatement(trimmedLine)) {\n                        isMultilineStatement = true;\n                        priorPartOfMultilineStatement = trimmedLine;\n                        continue;\n                    } else {\n                        isMultilineStatement = false;\n                        continue;\n                    }\n                } else if (trimmedLine.split(':').length - 1 > 0) {\n                    retVal.columns[retVal.columns.length - 1].columnName = trimmedLine.split(':')[0].trim();\n                    //TODO:Should check if null only column is nullable?\n                    let colTypes=trimmedLine.split(':')[1].split(';')[0].trim();\n                    if (colTypes.startsWith('Promise<')) {\n                        colTypes=colTypes.substring(8,colTypes.length-1)\n                        retVal.columns[retVal.columns.length - 1].columnOptions.isLazy=true;\n                    }\n                    retVal.columns[retVal.columns.length - 1].columnTypes = colTypes.split('|').map(function (x) {\n                        if (x == 'any') {\n                            x = 'string' //for json columns\n                        }\n                        x = x.trim();\n                        return x;\n                    });\n\n                    if (!retVal.columns[retVal.columns.length - 1].columnTypes.some(function (this, val, ind, arr) {\n                        return val == \"null\" ? true : false;\n                    })) retVal.columns[retVal.columns.length - 1].columnTypes.push('null')\n                    if (retVal.indicies.length > 0 && retVal.indicies[retVal.indicies.length - 1].columnNames.length == 0) {\n                        retVal.indicies[retVal.indicies.length - 1].columnNames.push(retVal.columns[retVal.columns.length - 1].columnName)\n                    }\n                    continue\n                } else if (trimmedLine == '}') {\n                    isInClassBody = false;\n                    continue;\n                }\n                else {\n                    console.log(`[EntityFileToJson:convert] Line not recognized in entity ${retVal.entityName}:`)\n                    console.log(`${trimmedLine}`)\n                }\n            }\n            console.log(`[EntityFileToJson:convert] Line not recognized in entity ${retVal.entityName}:`)\n            console.log(`${trimmedLine}`)\n        }\n\n        retVal.columns = retVal.columns.map(col => {\n            if (col.columnName.endsWith('Id'))\n                col.columnName = col.columnName.substr(0, col.columnName.length - 2)\n            return col;\n        })\n        retVal.indicies = retVal.indicies.map(ind => {\n            ind.columnNames = ind.columnNames.map(colName => {\n                if (colName.endsWith('Id'))\n                    colName = colName.substr(0, colName.length - 2)\n                return colName;\n            })\n            return ind;\n        })\n        return retVal;\n    }\n    isPartOfMultilineStatement(statement: string) {\n        let matchStarting = statement.split('(').length+statement.split('{').length\n        let matchEnding = statement.split(')').length+statement.split('}').length\n        return !(matchStarting == matchEnding)\n    }\n}\nclass EntityJson {\n    entityName: string\n    entityOptions: any = {}\n    columns: EntityColumn[] = <EntityColumn[]>[];\n    indicies: EntityIndex[] = <EntityIndex[]>[];\n}\nclass EntityColumn {\n    columnName: string\n    columnTypes: string[] = []\n    columnOptions: any = {}\n    relationType: \"OneToOne\" | \"OneToMany\" | \"ManyToOne\" | \"ManyToMany\" | \"None\" = \"None\"\n    isOwnerOfRelation: boolean = false;\n}\nclass EntityIndex {\n    indexName: string\n    columnNames: string[] = []\n    isUnique: boolean = false\n}\n"]}