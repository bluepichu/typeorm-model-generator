{"version":3,"sources":["../test/drivers/MssqlDriver.test.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+BAA8B;AAC9B,+DAA2D;AAC3D,+BAA8B;AAC9B,+BAA8B;AAC9B,4DAAwD;AAGxD,iCAA+C;AAC/C,6DAA0D;AAE1D;CAKC;AAED,mBAAoB,SAAQ,KAAU;IAElC,OAAO;QACH,OAAO,IAAI,aAAK,EAAE,CAAC;IACvB,CAAC;CACJ;AAED,QAAQ,CAAC,aAAa,EAAE;IACpB,IAAI,MAAmB,CAAA;IACvB,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;IAEpC,UAAU,CAAC,GAAG,EAAE;QACZ,MAAM,GAAG,IAAI,yBAAW,EAAE,CAAC;QAC3B,MAAM,CAAC,cAAc,GAAG,IAAI,+BAAc,EAAE,CAAC;IACjD,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,GAAG,EAAE;QACX,OAAO,CAAC,OAAO,EAAE,CAAA;IACrB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAS,EAAE;QACpC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC;aACzB,OAAO,CACR;YACI,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;gBACT,IAAI,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;gBAClC,QAAQ,CAAC,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;gBACzC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAA;gBACvE,OAAO,QAAQ,CAAC;YACpB,CAAC;SACJ,CAAC,CAAA;QACN,IAAI,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAChD,IAAI,cAAc,GAAiB,EAAE,CAAC;QACtC,IAAI,CAAC,GAAG,IAAI,uBAAU,EAAE,CAAC;QACzB,CAAC,CAAC,UAAU,GAAG,MAAM,CAAA;QACrB,CAAC,CAAC,MAAM,GAAC,QAAQ,CAAA;QACjB,CAAC,CAAC,OAAO,GAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC,OAAO,GAAgB,EAAE,CAAC;QAC5B,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACtB,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;IACnD,CAAC,CAAA,CAAC,CAAA;IACF,EAAE,CAAC,yBAAyB,EAAE,GAAS,EAAE;QACrC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC;aACzB,OAAO,CACR;YACI,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;gBACT,IAAI,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;gBAClC,QAAQ,CAAC,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;gBACzC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;oBACpB,UAAU,EAAE,MAAM,EAAE,wBAAwB,EAAE,CAAC;oBAC/C,cAAc,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK;oBAC1D,WAAW,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC;oBAC1D,UAAU,EAAE,CAAC;iBAChB,CAAC,CAAA;gBACF,OAAO,QAAQ,CAAC;YACpB,CAAC;SACJ,CAAC,CAAA;QAEN,IAAI,QAAQ,GAAiB,EAAE,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,uBAAU,EAAE,CAAC;QACzB,CAAC,CAAC,UAAU,GAAG,MAAM,CAAA;QACrB,CAAC,CAAC,OAAO,GAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC,OAAO,GAAgB,EAAE,CAAC;QAC5B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAChB,IAAI,QAAQ,GAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;YACrB,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,GAAG;YACZ,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,KAAK;YAChB,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,MAAM;YACf,gBAAgB,EAAE,IAAI;YACtB,YAAY,EAAE,IAAI;YAClB,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,QAAQ;YACjB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAC,KAAK;YACf,SAAS,EAAkB,EAAE;SAChC,CAAC,CAAA;QACF,IAAI,MAAM,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnE,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAC7C,CAAC,CAAA,CAAC,CAAA;IACF,EAAE,CAAC,6BAA6B,CAAC,CAAA;IACjC,EAAE,CAAC,yBAAyB,CAAC,CAAA;IAC7B,EAAE,CAAC,2BAA2B,CAAC,CAAA;AACnC,CAAC,CAAC,CAAA","file":"MssqlDriver.test.js","sourcesContent":["import { expect } from \"chai\";\nimport { MssqlDriver } from '../../src/drivers/MssqlDriver'\nimport * as Sinon from 'sinon'\nimport * as MSSQL from 'mssql'\nimport { EntityInfo } from '../../src/models/EntityInfo'\nimport { ColumnInfo } from '../../src/models/ColumnInfo'\nimport { RelationInfo } from '../../src/models/RelationInfo'\nimport { Table, IColumnMetadata } from \"mssql\";\nimport { NamingStrategy } from \"../../src/NamingStrategy\";\n\nclass fakeResponse implements MSSQL.IResult<any>  {\n    recordsets: MSSQL.IRecordSet<any>[];\n    recordset: MSSQL.IRecordSet<any>;\n    rowsAffected: number[];\n    output: { [key: string]: any; };\n}\n\nclass fakeRecordset extends Array<any> implements MSSQL.IRecordSet<any>{\n    columns: IColumnMetadata;\n    toTable(): Table {\n        return new Table();\n    }\n}\n\ndescribe('MssqlDriver', function () {\n    let driver: MssqlDriver\n    let sandbox = Sinon.sandbox.create()\n\n    beforeEach(() => {\n        driver = new MssqlDriver();\n        driver.namingStrategy = new NamingStrategy();\n    })\n\n    afterEach(() => {\n        sandbox.restore()\n    })\n\n    it('should get tables info', async () => {\n        sandbox.stub(MSSQL, 'Request')\n            .returns(\n            {\n                query: (q) => {\n                    let response = new fakeResponse();\n                    response.recordset = new fakeRecordset();\n                    response.recordset.push({ TABLE_SCHEMA: 'schema', TABLE_NAME: 'name' })\n                    return response;\n                }\n            })\n        let result = await driver.GetAllTables('schema')\n        let expectedResult = <EntityInfo[]>[];\n        let y = new EntityInfo();\n        y.EntityName = 'name'\n        y.Schema='schema'\n        y.Columns = <ColumnInfo[]>[];\n        y.Indexes = <IndexInfo[]>[];\n        expectedResult.push(y)\n        expect(result).to.be.deep.equal(expectedResult)\n    })\n    it('should get columns info', async () => {\n        sandbox.stub(MSSQL, 'Request')\n            .returns(\n            {\n                query: (q) => {\n                    let response = new fakeResponse();\n                    response.recordset = new fakeRecordset();\n                    response.recordset.push({\n                        TABLE_NAME: 'name', CHARACTER_MAXIMUM_LENGTH: 0,\n                        COLUMN_DEFAULT: 'a', COLUMN_NAME: 'name', DATA_TYPE: 'int',\n                        IS_NULLABLE: 'YES', NUMERIC_PRECISION: 0, NUMERIC_SCALE: 0,\n                        IsIdentity: 1\n                    })\n                    return response;\n                }\n            })\n\n        let entities = <EntityInfo[]>[];\n        let y = new EntityInfo();\n        y.EntityName = 'name'\n        y.Columns = <ColumnInfo[]>[];\n        y.Indexes = <IndexInfo[]>[];\n        entities.push(y)\n        var expected: EntityInfo[] = JSON.parse(JSON.stringify(entities));\n        expected[0].Columns.push({\n            lenght: null,\n            default: 'a',\n            is_nullable: true,\n            isPrimary: false,\n            is_generated: true,\n            tsName: 'name',\n            sqlName: 'name',\n            numericPrecision: null,\n            numericScale: null,\n            width: null,\n            sql_type: 'int',\n            ts_type: 'number',\n            enumOptions: null,\n            is_unique:false,\n            relations: <RelationInfo[]>[],\n        })\n        let result = await driver.GetCoulmnsFromEntity(entities, 'schema');\n        expect(result).to.be.deep.equal(expected)\n    })\n    it('should find primary indexes')\n    it('should get indexes info')\n    it('should get relations info')\n})\n"]}